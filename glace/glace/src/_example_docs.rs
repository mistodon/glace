pub mod example_assets {
    //! This is the root module.
    #![allow(clippy::derive_partial_eq_without_eq)]
    pub mod prelude {
        pub use super::audio::Audio;
        pub use super::images::Images;
        pub use super::text::Text;
        pub use crate::{Asset, CachedAsset, FileAsset, SerdeAsset, SingleAsset, VirtualAsset};
    }
    use super::*;
    use crate::{BytesAsset, FileAsset, StrAsset};
    use std::{borrow::Cow, path::Path, time::SystemTime};
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    /// TODO
    pub struct CACHE {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static CACHE: CACHE = CACHE {
        __private_field: (),
    };
    impl ::lazy_static::__Deref for CACHE {
        type Target = crate::cache::RwCache<ExampleAssets, <ExampleAssets as crate::Asset>::Value>;
        fn deref(
            &self,
        ) -> &crate::cache::RwCache<ExampleAssets, <ExampleAssets as crate::Asset>::Value> {
            #[inline(always)]
            fn __static_ref_initialize(
            ) -> crate::cache::RwCache<ExampleAssets, <ExampleAssets as crate::Asset>::Value>
            {
                crate::cache::RwCache::new()
            }
            #[inline(always)]
            fn __stability(
            ) -> &'static crate::cache::RwCache<ExampleAssets, <ExampleAssets as crate::Asset>::Value>
            {
                static LAZY: ::lazy_static::lazy::Lazy<
                    crate::cache::RwCache<ExampleAssets, <ExampleAssets as crate::Asset>::Value>,
                > = ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for CACHE {
        fn initialize(lazy: &Self) {
            let _ = &**lazy;
        }
    }
    #[repr(u32)]
    pub enum ExampleAssets {
        _Unknown(u32),
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ExampleAssets {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match self {
                ExampleAssets::_Unknown(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(f, "_Unknown", &__self_0)
                }
            }
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for ExampleAssets {
        #[inline]
        fn clone(&self) -> ExampleAssets {
            let _: ::core::clone::AssertParamIsClone<u32>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for ExampleAssets {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for ExampleAssets {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for ExampleAssets {
        #[inline]
        fn eq(&self, other: &ExampleAssets) -> bool {
            match (self, other) {
                (ExampleAssets::_Unknown(__self_0), ExampleAssets::_Unknown(__arg1_0)) => {
                    *__self_0 == *__arg1_0
                }
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for ExampleAssets {}
    #[automatically_derived]
    impl ::core::cmp::Eq for ExampleAssets {
        #[inline]
        #[doc(hidden)]

        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<u32>;
        }
    }
    #[automatically_derived]
    impl ::core::cmp::PartialOrd for ExampleAssets {
        #[inline]
        fn partial_cmp(
            &self,
            other: &ExampleAssets,
        ) -> ::core::option::Option<::core::cmp::Ordering> {
            match (self, other) {
                (ExampleAssets::_Unknown(__self_0), ExampleAssets::_Unknown(__arg1_0)) => {
                    ::core::cmp::PartialOrd::partial_cmp(__self_0, __arg1_0)
                }
            }
        }
    }
    #[automatically_derived]
    impl ::core::cmp::Ord for ExampleAssets {
        #[inline]
        fn cmp(&self, other: &ExampleAssets) -> ::core::cmp::Ordering {
            match (self, other) {
                (ExampleAssets::_Unknown(__self_0), ExampleAssets::_Unknown(__arg1_0)) => {
                    ::core::cmp::Ord::cmp(__self_0, __arg1_0)
                }
            }
        }
    }
    #[automatically_derived]
    impl ::core::hash::Hash for ExampleAssets {
        #[inline]
        fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
            match self {
                ExampleAssets::_Unknown(__self_0) => ::core::hash::Hash::hash(__self_0, state),
            }
        }
    }
    impl ExampleAssets {
        pub const ALL: &'static [Self] = &[];
        const PATHS: &'static [&'static str] = &[];
        const NAMES: &'static [&'static str] = &[];
        const BYTES: &'static [&'static [u8]] = &[];
        pub const fn const_bytes(self) -> &'static [u8] {
            &Self::BYTES[self.index()]
        }
        pub const fn const_str(self) -> &'static str {
            unsafe { std::str::from_utf8_unchecked(self.const_bytes()) }
        }
        pub const fn try_const_str(self) -> Result<&'static str, std::str::Utf8Error> {
            unsafe { std::str::from_utf8(self.const_bytes()) }
        }
        const fn index(self) -> usize {
            (0x00000000ffffffff & unsafe { std::mem::transmute::<_, u64>(self) }) as usize
        }
        pub const fn const_path(self) -> &'static str {
            &Self::PATHS[self.index()]
        }
        pub const fn const_name(self) -> &'static str {
            &Self::NAMES[self.index()]
        }
        pub fn all_variants() -> impl Iterator<Item = Self> {
            crate::_internal::visit_files(Self::PARENT.as_ref(), Self::from_path_internal)
        }
        fn from_path_internal(path: &Path) -> Self {
            Self::from_path(path)
        }
        fn path_ref(path: &Path) -> Cow<'static, Path> {
            Self::from_path(path).path()
        }
        pub fn all_paths() -> impl Iterator<Item = Cow<'static, Path>> {
            crate::_internal::visit_files(Self::PARENT.as_ref(), Self::path_ref)
        }
    }
    impl FileAsset for ExampleAssets {
        const PARENT: &'static str = "example_assets";
        fn from_const_path<P: AsRef<Path>>(path: P) -> Option<Self> {
            let path = path.as_ref();
            Self::PATHS
                .iter()
                .position(|&p| path == <str as AsRef<Path>>::as_ref(p))
                .map(|index| Self::ALL[index])
        }
        fn from_const_name(name: &str) -> Option<Self> {
            Self::NAMES
                .iter()
                .position(|&n| n == name)
                .map(|index| Self::ALL[index])
        }
        fn from_path_unchecked<P: AsRef<Path>>(path: P) -> Self {
            let path = path.as_ref();
            Self::from_const_path(path)
                .unwrap_or_else(|| Self::_Unknown(crate::_internal::fetch_path_index(path)))
        }
        fn try_path(self) -> crate::Result<Cow<'static, Path>> {
            Ok(match self {
                Self::_Unknown(index) => Cow::Owned(crate::_internal::fetch_path(index)?),
                c => Cow::Borrowed(c.const_path().as_ref()),
            })
        }
    }
    impl crate::serde::Serialize for ExampleAssets {
        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        where
            S: crate::serde::Serializer,
        {
            match *self {
                Self::_Unknown(_) => {
                    let path = self.path();
                    let key = crate::PathedKey::Path {
                        path: path.as_ref(),
                    };
                    key.serialize(serializer)
                }
                c => {
                    let key = crate::PathedKey::Known(self.const_name());
                    key.serialize(serializer)
                }
            }
        }
    }
    impl<'de> crate::serde::Deserialize<'de> for ExampleAssets {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: crate::serde::Deserializer<'de>,
        {
            let key: crate::PathedKey = crate::PathedKey::deserialize::<D>(deserializer)?;
            Ok(match key {
                crate::PathedKey::Known(name) => Self::from_const_name(name).expect("TODO"),
                crate::PathedKey::Path { path } => Self::try_from_path(path).expect("TODO"),
            })
        }
    }
    impl BytesAsset for ExampleAssets {
        fn try_bytes(&self) -> crate::Result<Cow<'static, [u8]>> {
            Ok(match *self {
                Self::_Unknown(_index) => Cow::Owned(crate::_internal::fetch_bytes(_index)?),
                c => Cow::Borrowed(c.const_bytes()),
            })
        }
        fn try_bytes_modified(
            &self,
            previous_modified: Option<SystemTime>,
        ) -> crate::Result<Option<(Vec<u8>, SystemTime)>> {
            crate::_internal::fetch_bytes_modified(self.try_path()?.as_ref(), previous_modified)
        }
        fn try_load_bytes(&self) -> crate::Result<Vec<u8>> {
            Ok(std::fs::read(self.try_path()?)?)
        }
    }
    impl StrAsset for ExampleAssets {
        fn try_string(&self) -> crate::Result<Cow<'static, str>> {
            Ok(match *self {
                Self::_Unknown(_index) => Cow::Owned(crate::_internal::fetch_string(_index)?),
                c => Cow::Borrowed(c.try_const_str()?),
            })
        }
    }
    impl crate::Asset for ExampleAssets {
        type Value = Cow<'static, [u8]>;
        fn load(bytes: Cow<'static, [u8]>) -> crate::Result<Self::Value> {
            Ok(bytes)
        }
    }
    impl crate::CachedAsset for ExampleAssets {
        type CacheType = crate::cache::RwCache<Self, Self::Value>;
        fn cache() -> &'static Self::CacheType {
            &CACHE
        }
    }
    pub mod audio {
        //! This is a sub module.
        #![allow(clippy::derive_partial_eq_without_eq)]
        use super::*;
        use crate::{BytesAsset, FileAsset, StrAsset};
        use std::{borrow::Cow, path::Path, time::SystemTime};
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        /// TODO
        pub struct CACHE {
            __private_field: (),
        }
        #[doc(hidden)]
        pub static CACHE: CACHE = CACHE {
            __private_field: (),
        };
        impl ::lazy_static::__Deref for CACHE {
            type Target = crate::cache::RwCache<Audio, <Audio as crate::Asset>::Value>;
            fn deref(&self) -> &crate::cache::RwCache<Audio, <Audio as crate::Asset>::Value> {
                #[inline(always)]
                fn __static_ref_initialize(
                ) -> crate::cache::RwCache<Audio, <Audio as crate::Asset>::Value> {
                    crate::cache::RwCache::new()
                }
                #[inline(always)]
                fn __stability(
                ) -> &'static crate::cache::RwCache<Audio, <Audio as crate::Asset>::Value>
                {
                    static LAZY: ::lazy_static::lazy::Lazy<
                        crate::cache::RwCache<Audio, <Audio as crate::Asset>::Value>,
                    > = ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CACHE {
            fn initialize(lazy: &Self) {
                let _ = &**lazy;
            }
        }
        #[repr(u32)]
        pub enum Audio {
            Empty,
            _Unknown(u32),
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Audio {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match self {
                    Audio::Empty => ::core::fmt::Formatter::write_str(f, "Empty"),
                    Audio::_Unknown(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "_Unknown", &__self_0)
                    }
                }
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Audio {
            #[inline]
            fn clone(&self) -> Audio {
                let _: ::core::clone::AssertParamIsClone<u32>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::Copy for Audio {}
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Audio {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Audio {
            #[inline]
            fn eq(&self, other: &Audio) -> bool {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                __self_tag == __arg1_tag
                    && match (self, other) {
                        (Audio::_Unknown(__self_0), Audio::_Unknown(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        _ => true,
                    }
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for Audio {}
        #[automatically_derived]
        impl ::core::cmp::Eq for Audio {
            #[inline]
            #[doc(hidden)]

            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<u32>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for Audio {
            #[inline]
            fn partial_cmp(&self, other: &Audio) -> ::core::option::Option<::core::cmp::Ordering> {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                match (self, other) {
                    (Audio::_Unknown(__self_0), Audio::_Unknown(__arg1_0)) => {
                        ::core::cmp::PartialOrd::partial_cmp(__self_0, __arg1_0)
                    }
                    _ => ::core::cmp::PartialOrd::partial_cmp(&__self_tag, &__arg1_tag),
                }
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for Audio {
            #[inline]
            fn cmp(&self, other: &Audio) -> ::core::cmp::Ordering {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                match ::core::cmp::Ord::cmp(&__self_tag, &__arg1_tag) {
                    ::core::cmp::Ordering::Equal => match (self, other) {
                        (Audio::_Unknown(__self_0), Audio::_Unknown(__arg1_0)) => {
                            ::core::cmp::Ord::cmp(__self_0, __arg1_0)
                        }
                        _ => ::core::cmp::Ordering::Equal,
                    },
                    cmp => cmp,
                }
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for Audio {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                ::core::hash::Hash::hash(&__self_tag, state);
                match self {
                    Audio::_Unknown(__self_0) => ::core::hash::Hash::hash(__self_0, state),
                    _ => {}
                }
            }
        }
        impl Audio {
            pub const ALL: &'static [Self] = &[Self::Empty];
            const PATHS: &'static [&'static str] = &["example_assets/audio/empty.wav"];
            const NAMES: &'static [&'static str] = &["Empty"];
            const BYTES: &'static [&'static [u8]] = &[b""];
            pub const fn const_bytes(self) -> &'static [u8] {
                &Self::BYTES[self.index()]
            }
            pub const fn const_str(self) -> &'static str {
                unsafe { std::str::from_utf8_unchecked(self.const_bytes()) }
            }
            pub const fn try_const_str(self) -> Result<&'static str, std::str::Utf8Error> {
                unsafe { std::str::from_utf8(self.const_bytes()) }
            }
            const fn index(self) -> usize {
                (0x00000000ffffffff & unsafe { std::mem::transmute::<_, u64>(self) }) as usize
            }
            pub const fn const_path(self) -> &'static str {
                &Self::PATHS[self.index()]
            }
            pub const fn const_name(self) -> &'static str {
                &Self::NAMES[self.index()]
            }
            pub fn all_variants() -> impl Iterator<Item = Self> {
                crate::_internal::visit_files(Self::PARENT.as_ref(), Self::from_path_internal)
            }
            fn from_path_internal(path: &Path) -> Self {
                Self::from_path(path)
            }
            fn path_ref(path: &Path) -> Cow<'static, Path> {
                Self::from_path(path).path()
            }
            pub fn all_paths() -> impl Iterator<Item = Cow<'static, Path>> {
                crate::_internal::visit_files(Self::PARENT.as_ref(), Self::path_ref)
            }
        }
        impl FileAsset for Audio {
            const PARENT: &'static str = "example_assets/audio";
            fn from_const_path<P: AsRef<Path>>(path: P) -> Option<Self> {
                let path = path.as_ref();
                Self::PATHS
                    .iter()
                    .position(|&p| path == <str as AsRef<Path>>::as_ref(p))
                    .map(|index| Self::ALL[index])
            }
            fn from_const_name(name: &str) -> Option<Self> {
                Self::NAMES
                    .iter()
                    .position(|&n| n == name)
                    .map(|index| Self::ALL[index])
            }
            fn from_path_unchecked<P: AsRef<Path>>(path: P) -> Self {
                let path = path.as_ref();
                Self::from_const_path(path)
                    .unwrap_or_else(|| Self::_Unknown(crate::_internal::fetch_path_index(path)))
            }
            fn try_path(self) -> crate::Result<Cow<'static, Path>> {
                Ok(match self {
                    Self::_Unknown(index) => Cow::Owned(crate::_internal::fetch_path(index)?),
                    c => Cow::Borrowed(c.const_path().as_ref()),
                })
            }
        }
        impl crate::serde::Serialize for Audio {
            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
            where
                S: crate::serde::Serializer,
            {
                match *self {
                    Self::_Unknown(_) => {
                        let path = self.path();
                        let key = crate::PathedKey::Path {
                            path: path.as_ref(),
                        };
                        key.serialize(serializer)
                    }
                    c => {
                        let key = crate::PathedKey::Known(self.const_name());
                        key.serialize(serializer)
                    }
                }
            }
        }
        impl<'de> crate::serde::Deserialize<'de> for Audio {
            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
            where
                D: crate::serde::Deserializer<'de>,
            {
                let key: crate::PathedKey = crate::PathedKey::deserialize::<D>(deserializer)?;
                Ok(match key {
                    crate::PathedKey::Known(name) => Self::from_const_name(name).expect("TODO"),
                    crate::PathedKey::Path { path } => Self::try_from_path(path).expect("TODO"),
                })
            }
        }
        impl BytesAsset for Audio {
            fn try_bytes(&self) -> crate::Result<Cow<'static, [u8]>> {
                Ok(match *self {
                    Self::_Unknown(_index) => Cow::Owned(crate::_internal::fetch_bytes(_index)?),
                    c => Cow::Borrowed(c.const_bytes()),
                })
            }
            fn try_bytes_modified(
                &self,
                previous_modified: Option<SystemTime>,
            ) -> crate::Result<Option<(Vec<u8>, SystemTime)>> {
                crate::_internal::fetch_bytes_modified(self.try_path()?.as_ref(), previous_modified)
            }
            fn try_load_bytes(&self) -> crate::Result<Vec<u8>> {
                Ok(std::fs::read(self.try_path()?)?)
            }
        }
        impl StrAsset for Audio {
            fn try_string(&self) -> crate::Result<Cow<'static, str>> {
                Ok(match *self {
                    Self::_Unknown(_index) => Cow::Owned(crate::_internal::fetch_string(_index)?),
                    c => Cow::Borrowed(c.try_const_str()?),
                })
            }
        }
        impl crate::Asset for Audio {
            type Value = Cow<'static, [u8]>;
            fn load(bytes: Cow<'static, [u8]>) -> crate::Result<Self::Value> {
                Ok(bytes)
            }
        }
        impl crate::CachedAsset for Audio {
            type CacheType = crate::cache::RwCache<Self, Self::Value>;
            fn cache() -> &'static Self::CacheType {
                &CACHE
            }
        }
    }
    pub mod images {
        //! This is a sub module.
        #![allow(clippy::derive_partial_eq_without_eq)]
        use super::*;
        use crate::{BytesAsset, FileAsset, StrAsset};
        use std::{borrow::Cow, path::Path, time::SystemTime};
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        /// TODO
        pub struct CACHE {
            __private_field: (),
        }
        #[doc(hidden)]
        pub static CACHE: CACHE = CACHE {
            __private_field: (),
        };
        impl ::lazy_static::__Deref for CACHE {
            type Target = crate::cache::RwCache<Images, <Images as crate::Asset>::Value>;
            fn deref(&self) -> &crate::cache::RwCache<Images, <Images as crate::Asset>::Value> {
                #[inline(always)]
                fn __static_ref_initialize(
                ) -> crate::cache::RwCache<Images, <Images as crate::Asset>::Value>
                {
                    crate::cache::RwCache::new()
                }
                #[inline(always)]
                fn __stability(
                ) -> &'static crate::cache::RwCache<Images, <Images as crate::Asset>::Value>
                {
                    static LAZY: ::lazy_static::lazy::Lazy<
                        crate::cache::RwCache<Images, <Images as crate::Asset>::Value>,
                    > = ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CACHE {
            fn initialize(lazy: &Self) {
                let _ = &**lazy;
            }
        }
        #[repr(u32)]
        pub enum Images {
            Jamjar,
            _Unknown(u32),
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Images {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match self {
                    Images::Jamjar => ::core::fmt::Formatter::write_str(f, "Jamjar"),
                    Images::_Unknown(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "_Unknown", &__self_0)
                    }
                }
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Images {
            #[inline]
            fn clone(&self) -> Images {
                let _: ::core::clone::AssertParamIsClone<u32>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::Copy for Images {}
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Images {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Images {
            #[inline]
            fn eq(&self, other: &Images) -> bool {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                __self_tag == __arg1_tag
                    && match (self, other) {
                        (Images::_Unknown(__self_0), Images::_Unknown(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        _ => true,
                    }
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for Images {}
        #[automatically_derived]
        impl ::core::cmp::Eq for Images {
            #[inline]
            #[doc(hidden)]

            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<u32>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for Images {
            #[inline]
            fn partial_cmp(&self, other: &Images) -> ::core::option::Option<::core::cmp::Ordering> {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                match (self, other) {
                    (Images::_Unknown(__self_0), Images::_Unknown(__arg1_0)) => {
                        ::core::cmp::PartialOrd::partial_cmp(__self_0, __arg1_0)
                    }
                    _ => ::core::cmp::PartialOrd::partial_cmp(&__self_tag, &__arg1_tag),
                }
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for Images {
            #[inline]
            fn cmp(&self, other: &Images) -> ::core::cmp::Ordering {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                match ::core::cmp::Ord::cmp(&__self_tag, &__arg1_tag) {
                    ::core::cmp::Ordering::Equal => match (self, other) {
                        (Images::_Unknown(__self_0), Images::_Unknown(__arg1_0)) => {
                            ::core::cmp::Ord::cmp(__self_0, __arg1_0)
                        }
                        _ => ::core::cmp::Ordering::Equal,
                    },
                    cmp => cmp,
                }
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for Images {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                ::core::hash::Hash::hash(&__self_tag, state);
                match self {
                    Images::_Unknown(__self_0) => ::core::hash::Hash::hash(__self_0, state),
                    _ => {}
                }
            }
        }
        impl Images {
            pub const ALL: &'static [Self] = &[Self::Jamjar];
            const PATHS: &'static [&'static str] = &["example_assets/images/jamjar.png"];
            const NAMES: &'static [&'static str] = &["Jamjar"];
            const BYTES: &'static [&'static [u8]] = &[
                b"\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x01\x00\x00\x00\x01\x00\x08\x06\x00\x00\x00\\r\xa8f\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00 \x00IDATx\x9c\xec\x9dw\xdc\x14\xc5\xf9\xc0\xbf\xb3\xd7\xdeJ{\xe9\xbdJ\x11\xbb  AAc\xef\x1a\xb1\xa6\xa8?\x93\x98b\x8aQcL\xd4\xc4\x14S\xd4hLQ\xa3\xa6\xda\xbb\x18\x0b\nVP\xb1\xa2\x82\x80\xf4\x0e/\xf0\xbe\xbc\xe5\xea\xce\xef\x8f\xbd\xfe\xee\xee\xed\xec\xdd\xbdw/\xdc\xf7\xc3r{\xbb3\xbbs\xfb\xee\xf3\xcc33\xcf<#\xa8PV\xd4\xd2\x97#\xf8* \x11\x08\x00$\xc4\xf7\x00\xb4\x9e@O\x90\r \xfbJ\xe4\x00\x81h\x88\x1f\xf3\x82\xa8\x07\xd13\x9e8\xfe)}@]\xfcXw\xa0\x1a\xa8\x89\x9fo\x046\x1b\x9b\x90\xf1\xf4\x89\xfc\tzZ\xecg\xd3\x0e\x04\x81\x9d v\x1a\x9fr\x17\xc8\xdd@\x18\xc4j`-h[%r\xa5@\xee4~\x9f\xf1\x0b\x05\x10\x02\xe6\xf2\xdb\\\x8f\xa9B\x81\x10\xb9\x93TP\xc3x\xa4\xa7s\raB\x024\x11C\x8c\xf0\xa0\x9f\"\x11\xa7\n8\xa2\xc4\x05\xec\xea\xbc\x0e\xf2AA\xcd}\x92\xb6V\r!\x9f\xe6w\xf1S\xb2\xa4\x05\xeb\x8aT\x14\x80\"\x02\r\x80\xe3\xf9\xa1\x10\x08\x8f\x84\xd3\x04\xfc\x02\x18W\xda\x92UH\xe3I\r\xbe\xa5\xc3\xa6(\x1f\xea/\xf0\"\x12\xbd\xd4e*K*\n\xc0\x02\r\x0f 8\x8e\x1fx4\xf4\x11\x12\xed\t`\xdfR\x97\xabB^\xdc-\x89}\xdb\x83\x16\x9a\xc3-\xe8DK]\x9e\x92SQ\x00q<\xf88\x96\xef{@\x9b \xd0\x17\x00\xb5\xa5.S\x85\xa2\x13\x8b\x10=\xdc\x8b\xf6\xf6\xf3\xfcQ\xc6\x88\x94\xba<\x9d\xce^\xab\x00\xbc\x048\x9e\x1fh:\xb1\x93\x81\'J]\x9e\ne\xc1\\\x89<\xf19n\t\xef-\xd6\xc1^\xa5\x00\xfcTq\x0c\xdf\xa8\x96\xf8_\x06\xa6\x94\xba<\x15\xca\x9aG@\xcc~\x8e\x9b\xf5=\xd92\xd8\xe3\x15\x80\x07?\xe7\xf3Co#\xb1\x07\x813J]\x9e\n]\x0e\xd9NS\xb7y\xdc\xdd\"\x89\x95\xba,\x05g\x8fU\x00\x01j\xb9\x94\xef\xf5ZI\xa4\xb1\xd4e\xa9\xb0g \xd0\xeb\x9f\xe3\xb6\x96(\xe1R\x17\xa5`\xecq\n\xc0O-\xc7\xf0\x9d\x91\x12\xfd\xf3R\x97\xa5h\x08\x01\x08\xe3\x03\x11\xff\x9e8\x95\xfe\'\x15&\xbb\"u\t\xcd\x83\x8c\xc5\x00i>\x84.\xcc\xbf$n!M\x87\xdde\xda\x87\x8c\xa7\x93i\x19\xa4\xf1\xdd<sW`g\x80h\xaf\xc7\xb8\xb9\xd4\xe5(\x08{\x94\x028\x85+\xaachm\xa5.\x87\x19B\xf3\x18\x9b\xc7CU\xf7\xde\x04\xba\xf5\xc4_\xdf\x0b_ue\xb0\xc1\x0e)%\xa1\xe6F\x82;\xb6\xd0\xb6c+2\x16A\xea1\xa4^\xeaq}9\xeeyn\xfb,J\xa8\xc4\xe5\xc8\x8f=B\x01\x1c\xca\xb1\xf4\xe3\x80\xc7\x81\xd3Jq\x7f\xcd\xeb\xc3[UK]\xff\xe1\xd4\xf4\x19\x98U\x0bW\xe8\x0c\xa4\xd4i\xd9\xb8\x8a\xdd\x9b\xd6\xa0G\xc3H\xbd\xf8\xedu\x89~\xef\x8b\xfc\xe9\xa2\x08\xc1\xa2\xdf\xabXt\xf97\xf5x\xae\xd04\xb4\xa2\xff\xb5\x85\xa6\xe1\t\xd4\xd0c\xc4\x04\xaa{\xf4)\xf6\xed*\x14\x90\x96\xcdkh^\xbf\x9cX\xb8(\xb5\xf5\x1b/p\xfb\xf4\x08\xed\xc5\xb8v\xd1\xe9\xd2\n\xe0\x04~T#\x10\xad\x85\xbe\xae\xd04\xfc\xb5\xdd\xe9=~\x12\x9a\xd7W\xe8\xcbW(1R\xd7\xd9\xfa\xf1\x02\xc2-\xbb\nu\xc9\x87^\xe4O\xb3\xc3\x94e\xeb\xd3\x96.\xab\x00N\xe4\xcaj(\xd4\x13\x17T7\xf4\xa3a\x9f\x83+\xe6\xfb^H\xcb\xa6\xd5\xec\\\xbd\x04d>\xfd\n\xfaQs\xf8\xfd\xcb\x85*Sg\xd1%\xdf\xf6\xd3\xb9\x960\xe1\xbc\xba\x91\x85\xe6\xa1\xd7\xe8\xfd\xa9\xe9=\xb0P\xc5\xaa\xb0\x07\xb0\xed\x93\xb7\x086mw\x95w-\xef\x8b\xc5\xbcX\xe0\x12\x15\x17o\xa9\x0b\xa0J\x80Z\xc2\x84]\xf7\xbaT7\x0c\xa0\xf7\xd8\x83\x0bY\xa4\n{\x10}\xf6=\x0c\x80\xa6\xb5\x9f\xd1\xbc~\x85R\xde\xa1\x1c\xf4\xc4b^,IG\xb4[\xba\x9c\x05p\x02?\xbaX \xeeV\xcd\xd7\xb0\xcfA\x95\xda\xbe\x822\x1b\xdf}\x99X\xc8y\x07\xdf:\x16\x89\x8f\xe8:-\x01O\xa9\x0b\xa0Bo\x861\x98\x89\xef\xa9\xe4\xa9\x1f0\x82~\xfb\x1f\x8e\xaf\xa6\xbeX\xc5\xaa\xb0\x07S?p\x04\xbe\xeaz\xda\x1b79K\xcf\xe0U+x\xfd\xc3\"\x17\xab`h\xa5.\x80\n\x939\xebt\x95\xf4\x83\xa7\x9e@\x8f\x11\x13\x8aU\x9c\n{\t5\xbd\x07\xd0{\xfc$Gi5\xf4_\x17\xb98\x05\xa5K)\x00\x81\xe7AG\xe94\x0fC\xa6\x9dX\xe9\xd1\xafP0\xaa{\xf6\xc5\xe3\x0f8I\xda\xa5\xda\x99]F\x01\x8ca\x1a\x80\xa3A\xf9\xc1S\x8e+na*\xec\x95\xf4\xdb\xff\x0b\x8e\xd2\x8d\xecB3\xcd\xbb\x8c\x02\x18\xc1tG\xd5y\xff\x83*17+\x14\x07\x87\x16\x00\x9e\xae#V]\xa7\xa4^\xe4\x81N\xd2\xf9\xaa\xebr\'\xaaP\xa1\xa8t\x9d\x99\x8e]F\x01\x08\x18^\xea2T\xd8\xbbq\xea:\xbc\x89\xe5E.I\xe1\xe82\n@BS\xa9\xcbPa\xeff\xfbg\xceF\xa0[p\xe7IX\n:\xdd\x130@5\xc3\x18\xcb\x10\xc6\x8f\x05\xfdH\xd0\x8e\x95\x88\xd1\xb9\xf2\x85\xd8\xec\xabb@\'\x94\xb0B\x05s\x9c8\x04\xe9\x84\xdbgq\xdeG\x0e.\x17\x01\xf9\x89\xa4\xf5I\x0fuo\xbe\xcf+\x9b\x1a\xd9\x90\x7f!\x15\xe9\xb4q\xb2\xe1\x1c\xccH\xc6\x9e\x06\xdc\x0f\xf8\x85+\xeb\xc3A\x16!\x10\xa2\xcb\x186\x15\xba\x08\xce\xe3\x0b\xb8\x9eP\x14\x95\xd0\xae\xa1\x1f\xf6\x01\x0b\x96lg\xad\xdb\xeb(Qt\x05\xe0\xa7\x8a\xc39c\x86@\xbe,\xf2\xf6<t&\xd8B\xd3\xe8\x82^\xce\x15\xca\x14#\x84\x99S\xc1\xce?R\x91\x84\xb0\x9fp\xdf\xe7x\xb4\xe8\xcd\xde\xa2J\xc9\x18&2\x84\xfd>\x10p@a\xae(pZd\xa1u)/\xe7\ne\x8c\xf3\xda_R\xc8\x11\x80v\xfc\xdf^\xc4\x83w\x84\x8b\x18q\xa8hR2\x8a\xfd\x19\xca\xc4\xa0\x80A\x85\xbd\xb2S\x9d%*\x9e\x80\x15\xf2F*\xc5\x08(\xec\xf0\x9f\x8f\xd8\tC\x18?h\x03+\x9e.\xd6B%EQ\x00\xf5\xf4g\x02\x93\x1b\x05\x14a\x06\x8eS\xa1\x96\x95\xbe\x80\ny\xa2\x12\xbd\xb88c\xff\x02\x0e\x19\xc68V\xf1\xf1+\xc5\xb8~Q$d2G^-\xa0W1\xae\xad\xd2\xc6R\xd3\xde\x15*d\xa2\x16y\xb8\x98\xce?\xe2\xfa\x0b\xf8f\xbf\xa2\\\xb9\xd0\x17<\x92s4\r\x11\x159\xaf\x9d\xef\xad\x9d\xf6\x05T:\x04+\xa8\xa3\xd6\xf1W\x08\xe1\xb7\xbf\x86\x84\xd0\xbb\xbcX\xd5T`\x1f\x83\x82[\x00\x1a\xe2\x7f\xc5\x17~\xe7\x94>~|\x85.I\xa7[\x8f\xf62! p\x18GL,\xf4]\x0b\xaa\x00\xba\xd1\x000\xc3>U\xa1\x84_E\xebv\x1d\xdf\xec\n\xa5\xa7t\x1d\x7f\xf6\xb2\x11\xc5\xbf\xa0\x807\x03\n\xac\x00\xf6ejw\x01U\xd6)Jc\x8aW\xac\x80\nJ\x94\xb4\xe3\xcfVF|\xdd\x8dJ\xb6`\x14T\x01\xf4\xa4\xe6\xd0B^/7\xce\xff\x00\xb2\xeb\xaeEW\xa1\x13)\xf3\x8ec\xdfd\x8e(\xe8B\x15\x05\x9d\x0b\x10\xc4sqi\xeax\x07w\x95\x12\xcd\xebl>w\x85\xbd\x97X$\x883K\xb5\xf3+\x14\x01Z\x8c\xc0``U\xa1\xaeY\xe8\xc9@\x93\xadOY?\xd4\xa3O\x9b\xc2y\x97\x9d\xe8\xfa\xa6\x97\x1d\xf37G\xe9\x06\xec?\x13o\xa0\xc6\xf5}*\xec\xd9\xec\xde\xb8\x8a]\xab?u\x94\xf6\xcf/|=\xaf{}\xeb\xf4\x1biou\xb5TY\x8f\xbcn\x9cE\xa1G\x01\\\x19\x00\xb1X~f\xd7\xe4\xa3\xc68J\xb7\xe9\xddyy\xdd\xa7\xc2\x9e\x8dS\xe1\xff\xc1\xcd\xa7\xe4}\xafri\x91\x16T\x01\x08\x84\xcd\x13\xb4\xfe\xc5\xbb\x9b\xf2[\xde\xef\xabW\xcdr\x9c6\xaa\x10\xe3\xbd\xc2\xdeC\xcb\xe65\x8e\xd2i\x1e\x8d\xd1\x13\xf3\x9f\x96\xae\xbb\xaf\xf4Z\xf2\xbey\x1a\x05U\x00:<\xe5&\xdf\x96\r\x8dy\xdf\xfb\x84\x0b\x9c\xad\xf6\xb3\xe9\xbd\xf9y\xdf\xab\xc2\x9e\xc7\xce\x95\x1f;Jw\xe3\xbf\xce+\xc8\xfd\xdctJ\xc7\x1d\x93\xb7\x16\xa4\x00q\nl\x01HW\xfe\xca\xebVnf\xed\xe7\xce\x16^\xb0\xe2\xa4/;\x8b\xdb\x8e\xd4\xa1\x13\xd6\x8e\xaf\xd0u\x085\xefp\x94\xce\xeb\xd3\xe8\xd1\xbb6\xaf{\xe9\xba\xce\xc7\x8b\x96\x13\t\xbb\x9a\xdc\x13}\x87\xe7\n:E\xb8\xa0\x9d\xf6Gq\x9e_\"\xdb\xad\x83}8u\xdf5f\xf2i\x9a\xe0\xf0c\x0e\xe2+\x97\x9f\xea(\xdf\x93\xf7\xbc\xcd\xf3\x0f\xbc\x9f3\x9d\xaf\xba\x96\xa1\x07\x1f\x89\x10\xa9\xb6\x98\x14 \xa41\xd3@\x90\xd6`\x91\x12)D\xfc\x80\x04!\xe2yd<Mzj\x81\x8c\xff/+\xee\xc7]\x86uo\xceq\x94\xee\xc6\x7f\x9fO\xaf\xbe\xce\x82\xceF#1~\xfb\xa3\xbf\xb3j\xd9F\xa4\x94\xc6\xa6\xe7\xe7_ !\xb8\x88\x17\xaa\x9b\xc9\xdfbNPP\x0b`\x11\xcf\x87\x81H\xbe\xd7\x91\xbaD\x8f\xe9D#1^\x99\xb3\x88\x8b\x8e\xf9)\x1b\xd7\xe4\xb6|N\xbd\xc8f\x10\"\x8dH{+\x01\x0f\x04\x04\xf85R\xfb\"u\xcc\x1f\xff\xee\xd7\x04~!\x8dc\xc9}\x19?\x87\xf1]\x80O\x03\x9f\x90\xf8\x85\xc4\'\xd2\xf7\x8d\xcd\x1b\xff\xf4\xc4\xf7=\x18\xfb\x1a\xc6\x96\xbe/\xe2\x9f\xc4\xf7\xc9\xd8\xc8\xda\xaf\x90\x0f\xb1\xb0\xb3\x9ex!p,\xfcO\xfc\xe3e.=\xf1zV|\xba\x8eX4\x86\x1e\xd3\xf3\x16\xfe8z!\x85\x1f\n\xac\x00\x9ah\x04\xc4R\xeb\x14\xee_\xdak\xff\xefv\x96|\xb02g\xba\xc9\xb3\x9c\x8d\x084o\\\x8dO\x13I\xc1O\x08t@\xcb\xdc\xf7i\t\xe5 \x93\xc2\xee\xcfR\x12\xbe4E\xe0O\n\x7fb\x9f\xac}\x99\x96\'\xb5y\xe3\xf9|\xc9\xef2\x99\xc7\x97T*\xe0\x15:^a\x8c\xdf\x1a\xfb\x12/\x12\x8f\xd0\r\xa5BJ\x91\xa4o\xc2d#\xc3N\xd9;\x15\xca\xe6\x0f^u\x94\xee\xf8\xf3\x0fs\x94\xee\x8f?\xfd\x17O\xfd\xa7X\xa3M\xfaQ\x85\xbeb\xc1\'\x03IZ\xa6\xe6J\xe1\x96\xdf]y/\xa1`\xd86\xcdW\xaf\xee8\"p\xcc\xa4\x7fq\xe0\x98\xf9\xd4V\xa5\xc2:\xaf_\xf1\x89Q\xe3k\x02\xbf\x10\x04\x84 \xa0\x89\xa4\xc0\'\x14A a\x05h\x86\xd0\xfbDj?S\x11\x08|Z\xca:H\xd4\xfaI+@K)\x90l\xeb\xc0\xa7I\xfc$\xf6\xf5\xd4\xf9\xf8\xbe\xb1\xe9x\x85n\x1cG\xc7\xa7\x19\xc2\xefC\xc7\xab\xe9\xf8H\xa5\xf1\xa5m\xde\xacc\x89\xef^d|?\x86\x97\xc41c\xdf#\x8cMC\xc7\x13\xdf\xb4\xacM$?%\x02\x1d\xe2\xfb\xa99\xf4V\x96Ky\xa1G;\xbeO\x1e-\xc2\xd8\xa1\xefp\xfc\x94{\x93\xc7f\x9e>>\xe7\xb5\xdex\xf1}>|kY\x1e\xa5\xb1}>\xd1\xb7\x99\xbb0\x8f\x8b\x9bR\xf0\xa8\xc0\x0bx\xa1}\x1a\xa7\xaf\x10`\x13\xe9\xd7h)\xbb\xe1\xea\xaf\xde\xca-\x0f\\i\x9b\xa6g\xb7\x1e\xecl6\x84\xdd\xa3\x85\xe9\xddc\x13\xbd{lb\xc2\xf0\xb7\x93ib1\x0f\xed\xe2\x1dZ\xe5\x97\x08\xb1/\x02\xa3m/1\x8af|\xcax{_\xa4^a!\xe3\xbf \xfd7\xc8\xe4k\x9eh\xffK\x81!\x08\"-o<\x85\x00\xf4\xc4Q!\x92g\x10\xf1\xde\xe1\xc4\xfd\x91\xf12\x18\x1d\x14\x92x?\x85\x16\xbf\xb34\xfa.\xa4\xc8\xea\xb70-\x9f\xb1o\xf4>\x0b\xd0d2\x83L\xec\x8b\xc4/\x88#\x12\xb9\xd3\xaf\x9b\xddG\x92x>\x89\x12\x0b\x84\xc8\xee\x1f\x11&yS\xe7:\\\xd3\x04\x99u\x8d\xac\x93\xf1\xe7\xa8\xc6\xee\xcdk\xa8\xafid\x9f!\xef3\xa4\xef2j\xaa:\x8e\xb0\r\xef\xff\t\xc1\xc0Lj\xebs{\x91\xde{\xf3\x13\xcaeHa\xaf\x1c\xd7\xb1\xec\xac\x96\x02\x9b\xffP\x04\x05\x10$\x88\x8f\x961Q\xear\xa8\xfbT\xc7\x99\nM;w\xe7Ls\xf4\xd4\x19<\xfc\xbc1\"y\xe6\x11w\x98\xa6\xf1xb\xd41\x8f:R\xe6\x9a\xc4O\xbb\x9cE\xab<\x9f\x88\x1c\n\x88\x94\xc0\xc7\xdf\xbcD_`JA\xc4_\xddd\xe7`JI\x18\xe9S\x8fA\x17qQI\\$\xed\xff\xc4e\x8c\xbc)Ub\xbc\xdb\xd2\xe8\x9c\x94 \xb5\x84\xac\xc6;\'\x85\xccT\x042\xfdU\x92\xc9\xb2J!\x8dsq\xcd\x91Rt\xd2P~I\x85\x95\xf8\xad)\x81KH\x9dL\xff\x92,w\xe6\xdf/\xbd\xaeO\xde/\xfdO\x9d\xd05\xd9J\x83\xf4rg\x92:n\xa5,D\xf2w\xa4\x970\xa3\xb8R\xa0\xd1\xc6\xb0\xc0}\xf4\xf1\xbe\x88_\xec\x82Q\x18\x9b\r\xd3\xf6\x9b\xc3\x87\xcdg\xda\'\x02V|\xba\xd6\xe5\xd8~n\xabHBd3k\x9ftq\xf1\x9c\x14e]\x80\xe7y\x9ac9o\x9f(\xd2\x81=d\xf5\x00,\x14\x83\x849\xf7\xbf\xc2\x89\xe7\x1eay\xc5n\x03\xfc\x08!\xa8\xab\xde\x8e\xd7\xeb\xbcOR\x10\xa6F<G\x8dx.y,*\x87\xd3\xce\xe9\xb4\xcbS\xe35w\xbc\x18\x19\x02\x9b\xf62\xc7\x05I&$FK%N\x08\xb1.D\x9a0d\xda\x07\t\xd9\xd3\x13\xda$.\xd1\xba\x8c\xd7\xac\"aXH\xe3\xde2\xae\xa4\x92\x82\x9b\xf6\xa8\x12\x02\x1d\x17\x00D\xfa\xdd2\x1fjz^)\xc8\xd0$Rd}&O\x00B7\xca\x80\xcc\x90\xcc\x94\x82\xc9\xb2\x08R\xba#\xcd\xaa\xcaT\\\xd6\x16\x81H\xfe\xa6D\nI\xeaYf\xbf2\xdd\xb5w\x19\xec\xff7\xdd<\x9ft\xb8\x92\n\x83k\x1f\x05\xac\xdf7\x80?\xfe\xec\xdf6gs\x0b\xb9=\xd1\xaaf\xb6\xe5y\rs\xdc\xd9\xe1\x0e\x19\xc3AW\x0ee\xdcM\xee\xaf`^<\xaf\xcf\xc3\x9ds\xae\xb7\xcc\xb5fa\x0b\xaf=\xb6\x8ca\xbd\xcfF\x88|\x1f~&:\xf5\x848\x8b\xa0\xbc\x10=i{\xcb\xb4\xe1C\x99lJ\x18\xefi\xea\xa55\x9a\xc6\x89ZSfZ\x0czb?\xcdL\x17\x12]\xa6\x86\'\x93\xb5=\x02)tD\\\"\x13\xb5\xbb\x9e&6\xc92\xc4\xad\x14\x99\x96?e\xc1\x90V\x062\x842\x81L\xdb\x91&\x96\x8e\x90\x02\x1d\x99h=\x98X\x0cY\xd7I~Oh2\x92\x19e\xba\xc9 HZWI\xe5\x11\x7ff\xc9Q\xd9\xa4\x165~_o\xef\xcb\x0c\xf4?@\xb5\xb6.\xd7\x9fQ\x99\xe9?\xfa\xdc\xf6\xfc\xc5\xc7\xfd\xd4&\x86\x88\xfbwp\x10\xbd\xfa\xfe\x93;\x8a#\xfd\x14ye\xa05,\xf9\xedP\xc6\xf5\x01\xae(\xe4u\xa3\x91\x18RJ\xcb\xa8\xbf\x03\x0f\xa8a\xc8\x9b[\x11\xb1\xc2\n?\x80\xc6n\xaa\xb9\x97jq/\x08\xd0\xe9C\x98\xf3\x08\x91e!\xc4\xff\x97\"\xd5<\xd5\x85D\xe8F\x8d-\xe3\x8a a\xde\x1b5u\xaa\xe5.E\xca@6\xf2&Lj\x19\xcf\x0f\x9a\xd0\rk\"\xd9o\x90\xbck\xfc3.4Bf\x94)\xbd\xdf!\xa1\xc3\xf4\xc4\x9d\xb3,\t\x99\xb4\xd9\xe3\x82N\xba%\x90x&\xa4\xf5\x1f\xc8\xb4\xbci\xd7\xc9h\x06\xa4\xd2\xa5\x14e\xa6\x98d(\x8ft\xcb\"\xedO^\xef\xf9\x88\xc1\xbe\xbb\xa8\xf1\xac6\xfd[\x15\x92e\xcf^\xc9>\'\xfc\xd6\xf4\xdc[\xf3>*J\x00!Il|1\x85\x1f\x8al\x01\x80\xb1\x14\xd8\xe1\x9cz\xb6@<\xa8\x9e\xdb\xbax\xa7}y\x16\xa7\\0\xd3\xf2\xfc\xeb\xbf\x1bM\xfe\xa6\x97:1\x0e\xa0]\xfe\x04I\x03)a\x83\xa4X\xca\x94P%\xdb\xe3\xe9f\xb3L\xef\x10L\x1e5,\x01\x0c\xa5!e\x9a\xa2\xc8P\x13i\x8a\'\xcd\n\xd1\xd3S\xa7U\xe92M\xfatiX\x142\xa9H\x0ce\xa0\xa7Y\xf62^\xd3g\x94O\xa6\x842\xb3\x033\xf1[\x13\xbf=\xbdm\xd2\xd1\xccO\xfe\n\x99\xd6\x1f\x01)\x0b\xcax\n\x0c\r\xdcLO\xef\xeb\xb9\xff\x10E\xc0\xca\n\xb8\xec\xb4\x1b\t\xb6Y\xf9\x13\xb8z\x07e\x0c\xbd\xdf|\x1e,\xaa\xf0C\'(\x80\x04\xc7pA Fl\x13\xd0S-\xa7y\x11}~/\x7f{\xe6:\xd3s\xc1\xa6\xf5,\xba\xd3\xbe\xcd\xd6\x19\xe8t#\xc4\xe5D9\x92t\x05@\xea[j\xdf\xeax<OV\x1dN\xaa~\xcf<\x9eT\x08I\xc9J\xeb+\xc88\'3j\xd6d\x13&aed\x8fV\xc8\xd4\xf5\x05\"\xb5/\x13VO\xc7R\xa5\x94\x87L\x1eO\xe4M\xfc\xa7#\xd2<2S#\x1d\t\xeb\xa4Z\xac``\xe0\xcfTkk\x9c<\xf2\xa22d\xeaw\x186\xfd{\x1d\x8e_r\xfc\xcf\xd0-\xadM\xe7\n \x9e\xf2\x7f\xeb\xf9\xec\x84e8[\x884_:M\x01\x80a\r\xcc\xe0\xd8\xda\x18\xd5/a\xac\x16$\x04\xe4\x18_1/\xa2\xa6\t\xee~\xee\xe7\xa6\xe7\x16\xfc\xf1\x00b\xe1\x82N\x9a\xca\x1b\x89\x87\x10_\',\xcf\x88\x7f/\x8e\x02H\xfe/;\\\x85\x0e\x16@F\xf9\xb2\xca\x90\x1c\x05\x90Y5y\xb2H\xc9\x82e\xd6\xf2)\xcbB&\xfb5R\xe9\x92\xc2\x9eh\xdf\xa7\xf7=\xc4\xcf\xd5j\xef\xd3\xdf\xffW|\x9a3\x1f\xfd\xce$\xdb\n\xd8\xb2\xa1\x91\x1f\x7f\xedV\x9b\x1c\xb6\n@\x07\x116\x1a\x84\xe2\xce*Z\xbf\xff?\x9e\xecT\xb3\xb5SW\x07\x0e\xd1\xce\x8b<\xd1\nL\xe9\xcbP&p\x98\xe6\xc1\xf74\xc8cQ\\\xa4D\xd7%\x1bVoa\xd0\xf0\x8e\xe1\xd2\xcbM\xf8\x01\x041\xaa\xf83U\xe2\xcfH|\xb4\xc9+\x88\xe2|\x1as\xa9\xb1\xe8h\xcfJ\x93\x1a\xb6\x84\xf4\xf6\xba\xcc\xd8Otp&\x15\x8a\x00\xbfXM\x7f\xffMe)\xf4\xe9\xb4n_Nm\xef\x94\xb7\xe9\x93\xff|\xd9&\xb5\xb5,K\x08\x0b\xe4Y\xebY\xfe\xf4\x1a\x96\x10$\xbf)\xf1n)\xd9\xd29[Y\xcb|\x1e\xd6\xab\xf1\xfe\x1f`\xe3\x90m\xfd\x10\xe7=\xf3N\x87c\x9f=\xf3\x03G\xf7\xaf\xef\xed(YQ\x10D\xa8\x15\xbf\xa6\xbb\xf8\"\xf5\xe2\xcb\x08\x9aKW\x98\x92\"\x19\xe4\xbf\x96Q\xd5\xb3\x19RuUI\x85\xbf\xd6a\x9c\x9d\x8f\x1f<?\xe3\xfb\xbbo8\x0b\"\x92\x8d@D?\xe0\xd5\xa7?cQ\xc9\x84\x1f:\xd9\x020\xe3]^\xdb8\x81\xa9\xb8\xe9,y\xfd\xf9\xf7\xb8\xe0\xdb\'e\x1c\xdb\xb6\xc4\x99\xbf\xc4\xc9?L\xedGC\xb0y\x05,z\x1a\xda\x8a\xbe\x1ek&\x1a\x9b\xe8.\xce\x02\x01a\xfd\x18Z\xf9a\xeeL\n\xf8y\x8fj\xed)\xbcb%\x1e\xb1S)oD\x0e\",\xc7\xd3\x14=\x07\xbd\x80\xd1h\xbby\x9e\xa1\xc1\xf7O7\xce{\x05\xc1\xe3\x85CN\x81\xc1\xe3\xa1*m~\xcf\x7f\x7f\x9c;o\xa4-\xd3\x1b\xcfM4\xabD\xbfi#\x1b\x95\xf3\x16\x9a\x92+\x80M\xacb\x02S\x13\x0fE\xe9\x95\x88\xc52\xe7\xf5\xeb1gN?\xa3\xb3&\rz\x030x_cK\xd0\xbc\x1d\x96\xbe\x06+\xde\xa6\xd3\xf0k/\xe0\xe7\x05t\xd9\x8f&y\x0fn\x96n\xac\xe6aj\xb4G\xd0D\xfe\xb5\x8aOl\xc0\'6P\xeb\x9f\x9b<\x16\x91\x83\xd9\x19\xbd\x94\xa0T_\xa3b\xa0\xff\x1a\xaa\xb4\x15y\x97K\xf9\xbe\xe3`\xff\xa3\xa1W\x8eej\xbf\xf8\rx\xf1\xaf\xb9\xaf\xb7\xf5\xd3\'\xe9;\xe1\xd4\xe4\xacU\x17\x84%\xf2\x17n2\x16\x9a\x92+\x00\x00\x89~\x07\x88\xcb\x01\xbfJ>=k\x8a\xe5\xb2g\x9d\xd5\x9e\x93\x1c\x84\x17\xe8\xd6\x1b&\x9fnl\x00\xa16X\xb6\x00\x16\xcf\xb5\xcfW\x084\xb1\x85\x9e\xe2D\xa4\xd4h\x96\xb7\x12c\x1f\xdb\xf4u\xdamT\x89\xe7\x8b_0\xc0\'\xd6\xd3\xd7\xf73\x00tY\xc3\xf6\xc8\x0fh\x97\x07Y\xa6\x17\x04\x19\x12\xf8&\x1e\xd1y\xfd2#\x0f\x81\tG\x1a\x7fC\x15\xfa\x0cs\x96\xee\xf3\xb9\xd7\xd3w\xc2\xa9,\xfdh\x95r\xd9\x00\x04\"&\x90\xffp\x95\xb9\xc0\x94\x85\x02\x00q\xaf\x80o\xab\xe6\x92\xbadgc3=\x1b\xba\x01\xb0}\xa9\xb3\xc0\x0en\x16\r\x0e\xd4\xc0~G\x19\x1b\x18M\x85\x8f\xe6\xc2\xcaE\xea\xd7r\x8a\x10:\xdd\xc5w\x91@\x8b~-ayx\xea\x1cM\xf4\xd4.E\x13\xb9\xe7F\x14\x0bM\xb4\xd1\xd7\x7f#\x00!}\x1f6G~\x95<\xe7\x11[\x19\xec\xff.B\x14?\xfaR\xdfQ0\xe9\x14\xe8\xde7\xffk\xf5\x19\x06\xdbr\x8c8\xc6BF\x9f\xcd\x07\x0b?\xb3Ie\xdf\xa4\xfd\x84\xb7\xf2\x0b\x81U \xcaB\x01\xac\xe7\xd3%C\xd8WZ?4\xeb\xfe\xe7\x15\x9f\xace\xd2\x0c\xe7\xe6\xe8\xf4\xf3s\xa7qBMw\x98r\xa6\xb1\x01l_\x07s\xef\x04\xbd\x08\xcb\xb8\x0b\xa0^\xbb\x11\t\xb4\xe9\x97R\xa3\xdd\x95\x18M/\x1b\x02\xda2\x86\x05\xce\"*{\xe3a\x17B\x14g=\xfb\x043\xbe\x0c\x83\xc7Q\xf0\x81\xec\xe9\xe7\xc3\xe3\xbf\xca\x9d.\x16j\xe1\xc3\x856\xa1/r\xd0\xc8f\xd7y\x0bIY(\x80Vv\xe5Nd\xc1\xaa\xcf\xd63i\xc6DZ\xb79\x9b\x87=d\xdf\xdci\xdc\xd0{\x08\x9c\x13o\xd5\xb55\xc1\xc2\x87a\xb3\xbd\xfb\xb82\x02\xa8\xd5\xee,\xecE\x0b\x8cW\x14v\xf5\xda\x04\xbe*8\xe6\x1b\xd0\xbd(\x8bd\xa7\xa8\xaew\x96n\xcd\x1b\xb7\xb2s\xbb\xbau\x13\xaf\xe5\xf40m\xcay\x8bAY(\x80\r\xaca\x1c\x87\xe7Nh\xc2\xb2\xc5\x86\xbd\xb6\xfe\xad\xbf8J\xdf\x19=\xcf5\xdda\xd6%\xc6~\xb8\x1d\x16>\x02\xeb\xdd\x8d\x16\xed\xd5\x04\xea\xe0\xb8\xcb\xa0V\xd1w4_4O\xee\xb8\xb1[?y\x1c)Ovs\xf9\x98@vN\x87\x8d\x03\xcaB\x01\xc4\x91nF\x026\xaf7j\x9c\x1d+\xe7\xe5L\xdb\xad\x00mDU\xfc\xd50\xe3Bc\xbf}7<\xf7\'h\xdf[\x87\xfd\x1dr\xe2\xf7\x8a_\xd3\xdb1\xf9tCi\xdb\x11\r\xeer\xbb\xb8GL\xa7\xe5\x05W9\x8b@\x19)\x00\xf9\xa1\x80)(*\x80h\xc4hk\xc6B\xb9;\xc3\x0e:\xceU\xc1\nFu=\x9c\x1e\x1fkn\\\x0f\xcf\x9b\xc7*\xd9+\x99v6\x0c;\xb0s,\xb4\\\x0c\x1c\xeb,\x9d\x9b\xd8\xfe\xc6\\\xa9\xba\xe5\xca\x19\x8bD\x19)\x00\xf1\xb1D\x1e\xa6\xfa\xf7W\xf9\x1b4\x0cQ\xbcx\x11i\x18\x0c\xe7\xfd\x1abQx\xe9.\xd8\xbe\xb6\xb8\xf7\xf3v\x83\xda\x81\xe0\xa9\x06\x8f\x1f\x84\xc7\x106A\\\xe8\xe2\xd3\x96e\x0c\xf4\x08\x84vA\xf3\xca\xe2tj&\xf0x\xe1\xb4\xab!\x90_\xa8\xfd\x82S\xe5,\xf8\xaf\xda\xcb\x97\xc8bL\xb2*\xf2_\xdb9e\xa4\x00\xd8 \xdc\xb8\x03*\xe0\xf8\x0f\xdb\x89x\xbcp\xcc7\x8d\xfd\x95\xef\xe66=\x9d\x12\xe8\x07\xd5\x03@\xf3\xc5\x05=\xaeY\xd3\xf7\xcd\xd0<\xa0y\xc1W\x03\xf5\x83H\x06\xf1\x89\x05a\xeb\x07\x10)P\xdf\xd5\xb9\xbf*\x8f\xda\xbe\xb31\xc2\xa9\x88\xb2\x99\xf0P6\n\xc0\x8b\xdc\x11-\xb2\x02(g\xf4X\xfe\xc2\xef\xeb\t5\xc32kw+Te\xcf[\r\x03\xa7\x19\xd7\x8d\x85`\xfd\xeb\xe4\x15\x04\xe3\x91\x1b\xe0K\xd7\xbb\xcf_\x1e\xb8{]\xfdx\xcaf\xb6Z\xc9&\x03e\x131\xfa]\xf7\xc2:\x01t\x1d\x1e\xb8\xd6}\xfe\xba\xd1\x82\x9e\x87\xfa\xa8\x1f\x1d\xc0\x13\xa8\xc6\xe3\xadB\xf3\xf8@\xd32\x1e\xa8\xa3\x1a\xd7,\x8d\xc8<\xe5\xad\x82\x11G\xc3\x88c\xa0\xcae\x0f}$\x04\x0f\x99\x87s\xd8\xe3\x89\x11-\x9b\x8a\xael,\x00\x015r/\xb4\n\xa5\x84\x07~\xe2.o\xfdh?U}\x02\xe0\r\xa0i^\x84\xe6!1\xd5VH\x1d)\xa3H=\x8c\x8c\x86\xd0cA#S\xf6\x036y\xe0\xc2\xfet\xf2\x84\x00\x06\xc5\xd7\xcbX=\xcf\xb0\x0cT\x88\x86\xe1\xb1_\xc2\x19.\x7f\x7fWD\"\x84N\xcc\x0f\x14\xd7S\xca!e\xa3\x00$Z?\xd5!@\xe8\xfa\x1a\xe3\xfek\xd4\xf3x\xaa\xbc4\x1cZ\x8b\xe6\xadF\xf3U\xa1y\xfc\x08\xcd\x87\xd0\xbcF\x9cD)\x91\xc4@\x8f\xa2\xebad4\x88\x1em\'\x16m3\xa44\xabF\'\xfb\xc1+>S!`\xc4QF\xe7\xe1\xca\x17\xd5\xf2\x06[`\xe1\xa3)\x8f\xca=\x1d#f\x82\xb7;\x94\x87\'P\xd9(\x00aDhWn\x92T\xd7V\x17\xa14\x9d\xc3c\x0e\\N\xb3\xe9\xb1_\x15\xd5\r\xf5h\xfeZ<\xbe\x1aC\tx\x02\x08\x8f\xcf\xb0\x00\x84\x16\xf7\xa8\x88!e\x04\x19\x0b\xa1G\x83\xe8\x91v\xb4h\x00=\xb4\x1b=\xda\x9a\xdb\x12\xb0\xf8n\xd5\xa4\x10\x18\xa3\x0b\xfb\x9c\x08\xab_\x01\x95\x98,+\x17\x19C\xb4\xe56\x1a\x90\x0b\xa1\xc5\x83&* A\x93\xe8\xfd\x80\xca\\\x80t$\x1c\xe8\xa62\x1f2\xa2\x84\x1e#y\xd0\xb8\x0e\x82\x8a\xf3x\xfaL\xab\xc6W\xdd\r\x8f\xbf\x1e\x8f\xbf\x0e\x8f\xaf\x16\x8f\xb7\x06\xe1\x0b\x18V\x80\x88[\x00B\"\xf5\x18R\x8f\x18\xc2\x1fm\'\xe6\t\xa0E\xbc\xc44\x8dXH\x10\x8b\xb4t\xa8\xf9\xb3\x05\xda\xccR\xc8\x89\x80\x11GB\xcbf\xd8\xa00Q\xea\xd1\x1b\x8da\xd1\xae\x84\x10\x1a\xa0\xec\x0e\xac\t\x18\x0e|P\xf0\x02\xb9\xa0l:\x01\x05\xa2\xbf\x9b|\x83G9\xcf\xb6\xbb\xf0++\xb9BJx\xfe\xcfjy\xfa\x1d\xee\xc7_]\x8f\xd7_\x8f\xaf\xaa;\xbe\xaa\x1e\xf8\xaa{\xe2\xab\xe9\x89\xbf\xa6\xc1\xd8j\x1b\xf0\xd5\xf6\xc6W\xdd\x1b\x7fMo|\xd5\xbd\xf0\xd5\xf42\xd2U\xf7\xc0[\xd5\x1do\xa0\x1b\x9e@=\x1e_\x8dqa\x87J \xf3\xa0M\xfa8\xf5\x03`\xb4\xa2\xe3U>\x1d\xa1\xa5\xc0*,}\x0e<\x02\x0e)tY\xdcR6\n\xc0-\xfbL\x1c\xee8\xed\x06\xf7\x93\xb7\n\xca\x83?SK\xdfw\x1ax\x03\xb5x\x02\xb5x\xab\xea\xe3[7|\xd5=\xe2\n\xa0\x17\xbe\xda\x06\xfc\xb5\xbd\x93\x9b\xaf\xa6!M\xf8{\x1a\xc2_\xd5\ro\xa0\x1e\xaf\xbf\x0e\x8f\xbf\x16M\x8b\x1b\x80\xb9\xfa\x00l\x94\x84Uz\x00\xaf\x1f\xc6\x9e\xe8\xfcw\xea1\x08\x95.:V\x92\xa6\xdc+\xd1\x03\xd0\x7f\x88z\\\xb9\xf8\xa3,\xb1Oj\x8a\xb2P\x00\x03\x18\x95\x15\xa36\x1bkM;j\xfc`\x006;\xe8Ry\xcfY\xb8\x80\xa2\x12\t\xa9y\xd7\xf5\x9b\x06\x1e_5\x9a\xbf\x06\xaf\xaf\x16o\xa0.n\x05t3\xb6j\xc3\x12\xf0W7\xa4,\x81\x84\xf0\xd7\xf4\xc2We\x08\xbf\xaf\xaa\x1b^\x7f]R\xf8\xbd\xbe\x1a4_\x8diG\xa0\x95\xf9\xaf\xda\\\x10\x18NEc\x8fw\xfe{\x1f\xbd\xd1y\xdab\xf1\xd9\x9b\xce\xd2\x8d=`\xb8\xcb;\x88\t.3\x16\x9c\xb2P\x00\x938X\xe0\"\xfe\x95\xd0\x04\xf5\xdd\x8d\x9e\xa3\xb7\xb68\xc8P\x06\xa3\xaf\x0f_\xef<m\xbf\xc3\rA\xd3\xbc\xd5x\xbc\x86\x12\xf0\xf8j\x0cK P\x87\xa7\xaa\x1b\xde@\xf7xS\xa0W\xbc\xd6\xef\x8d\xaf\xb6\xb7a\x15T\xf5\xc4[\xdd\xc30\xfb\xfd\xf5x\x03u\xc9kh>\xc3_@h\xde\xcc6~\xba \xe7\xea\x03p\xf8\xdd\x13\x80\x81\xd6A\x83:\xb0\xfa#\xe7i\x8b\xc1\x8a\xb7r\xa7Y\xb3\x1b\xaa\xfb\xb9w\xb5\x1aK\xee\xe5\xc6;\x83\xb2P\x00\xdbh?\n\xf0\xa9\xe6\xd3\xb4T\xf1\x9ft\x18\x9d\xa9\xb3\x83~\xa6c\xb2\x14\xbd%}\'\x19\xbdE\xc2\xe3\xc7\xe3\r\xa0y\x03x\xbcUx|\xd5\x86\x12\xf0\xd5\xe2\xf5\x1bM\x01oUB\t\xa4\xcc\x7fou/\xa3\xdd\x1f\x88\x9b\xfd\x81Z4_\\\x81\xf8\xaa\x8ck\xfa\x02h^\x7fr\x1e\x00\x98\x08~\xae6\xbfCK\xa1\xe7p\xc3\x81\xc8\to\xde\xef,])\x99\xbb\x0e\xfa\x0c\xeb\xe6*\xaf\x04\xcfvJ\xf8\"\xa6Q\x16\n\xa0\x9a\xfao\t\x17e\xd1\xb4\xd4\xab\xe6t4f\xfe}\xaaw)\x1cN=\xdf<Uqa\x11\xe0\xf1x\xd1<>4\xaf\x1f\xcd\xe3O*\x02-\xae\x08\xbc\xfe:\xbc\x81nF\xa7`M/C\tT\xf7J\xb5\xfb\x03u\x195~\xe2:\xc2\xebG\xd3|\x08OJ\xef\xda)\x81|:\n\x13\xdf\xc7\x9d\xe0\xec\xf7\x03\xb4\xa8\x050.\x18\xab\xdew\x96\xee\xb5M\x10\x0e\x87\xd0<\xea\"$\x90\xde\xfd9B\xc1&*\x1ee\xa1\x00\x04\xe2\x187\xf9\x0e\x9c2.\xe3{\x8b\x83\xa0\xc0\xbbJ\x14\x89Ie\xe2X\xff\xc9\xa4\x84N\xf3\"<\x1e\xc3\xd3\xcf\xe3M\n\xad\xa1\x0c\xfch\xde*<\xfeZ<\x81nq+\xa0\x01oM\x03\xde\xaa\xeex|\xb5h\xde*4o|\x98\xd0\xe3K\xe5O^\xcf\x93\x9c\r\x08\xe6J q C\xf0\x15:\n\xd3\xaf5\xfa(g\xcf\xe0)\xf3u8\x8b\xce\x82\x87\x9c\xa7\xad\xa9\xa9\xc5\xe3B\x01\x00\x1e\x81\xbc\xdcM\xc6BSr\x050\x80\x11\x80\xb4)\x87u[j\xd6)\x99\xf1\xbd\xefY\xe2\xec\x9e[V:KWH>t\x18\x03\xa6n\x18)a\x12\x86\x95\xa3\t\r!44MCh\x1aB\xf3\xc47\xc3:\x10\x9a\x0f\x8f\xb7\n\xaf\xbf\x1e\x7fMo\xa3\xcd\x1f\x9f\x0f\xa0i\xbe\xb4\xf4\x1ec~\x80\xa6\x19\x0eCB$?3\x04^d\x96\xc1R\xf0\x15:\n\x13\xe7\xab\x1d.\xc0\x01\xaef\xdb\xe6E$\xe8,\xdd\xa2\xf8(A\xff\x86\xfe\x8c\x9e0\xd4\xd5\xbd\x04\xda\x97\\e,0%W\x00\xe38l?\xa9\x18\x0e\x1c\x8c1\xd8\xb1\xfb\x8f\xc88\xf6\x9e\xc3\xb5T_\xbaK\xf5n\xf9\xf3\xe9+\xce\xd2\xf5\x18A\xc6\xfc|H\xec\xcb\xd4>i\xfdu2\xb1\xee\xae\x8c\x07\xa8\x88o2-q\x1a\xc9K&\xae/d\xa6\x99/\xcc\x05\xdaL\t8\xe9\x030;\xbf\xaf\x83\xb0\xec\xe0\xfc\x99\x15\x8a\xc7\x7f\xe3,\xdd\x9f\x16\x1b\x9f\xc3\x06\x0e\xe3\xe8\xd3\xa7\xd8\xa4\xb4\xae\xbc$x\x8c\xca\xaf\xb4\x94\\\x01h\x88[\xdc\xb4\xff=^\xf3,;\x1cj\xf1\xdd\xc5\x89]i\x8a\xd3\x9a\xcc\xdf=M\xb8\x92\xef\x8e\x0eRGJ=\xbe\x1f\x8b\xbb\xf9\xc6\x8c\xc9>\xd2\xf0\xf7\x8fE\x83\xc4\xc2\xbb\x89\xb4m\'\x16l\"\x16mC\x8f\x85\x90z\x04\xa9GAF\x81\x98q\x1d\x19\x03\xa9#\xd0\x11R\xbaR\x02\x1d:\n\xb3\xf2d\xecf)\x01\x8fCu\xef\xd4j*\x08\xd2X!J\x05!\x04\x07N\x19\xe7r>\x8a\xf4\x0fc\xc2T79\x0bII\x15@\x7fF\x00\xc2\xd5C\x186z\x80\xe9\xf1k\x1d\x0c\xe1\x00<\xfd\x077wu\x87S\xe7\x96~q\xff\xb0\x0c%\x10\x17td\x14\xf4(21\xc1G\x0f\xa3\xc7B\xe8\xd1v\xf4H+\xb1\xf0n\xa2\xc1\x1dD\xda\x1b\x89\x04w\x12\x0b5\xa3GZ\xd1\xa3\xed\xc6|\x80X\x18\xa9G@\x1a\n\xc1\x98)h\\\xdbT\xf8\xb3,\x90\x04\xb9j\xff\xectVi\xbb\x99\xff\xf9J\xc6c\x0e\xdd\x90\x1f\xceZ\xd8H\x08\x81\xc7\xab\xbe\x82\x93\x00QK\xf7\xff(g,0%U\x00\xc3\x990\x1ad\x8du\nk\xd5z\xd6%\xc7f|\x1f1\xd80\xa7\xda\xa2\xcek\xdc\xce\xea\x10t\xea\xf6+\xc84\xff\x85\xc0\x10Z=b\xf8\xf5\xc7\xc2\xc8X(>\xc1\xa7\x1d=\xd2F,\xd2B,\xd4L4\xb8\x93H\xfb\x0e\"\xad\xdb\x88\xb4m\'\x1a\xdcI4\xd4D,\xdc\x82\x1em3\xd2G\x83q\xab\xc0P R\x1a\xd7\xb6\x13~\xb3HB\xc92&\x0bm\xd3T0Q\x18\x00#\xbe\xe0\xec\x99\xe8y\x04\x1dq\x8a\x1es>/c\xce\x9a\x8e\xc7\xf6\xd9o\xb8\xcb;\xcb\x11\xfbp\xa8\xcb\xbc\x85\xa1d\n`\x16\xe7}\xb3\x96n\xae\x82#\nM06\xeb\xa1\x9f|\xe4)\xc9\xfd\xbf;\xec\x0c|\xf6\x8fn\xee\xaeN\xab\x83!-oM\xa6`%\x05IF\x90z\x08\x19\x0b\"c\xedqAnK\xd6\xfa\xb1P3\xd1\xd0\xaeT\xed\xdf\xbe\x9dh{c\\\x01\xec\"\x16j\"\x1a\xde\x1d\xb7\x06\xda\xe2\x16A\xd0P$\xd1 R\x0f;\x12~\xabQ\x82\x9c\xfd\x05\x90!\xf8&\xdd\x12\xb6l7\x11\xb8B\xe3t\x0e\xc2\xe2\xb4\xb9$\xfb\x8eJ-0q\xdeev\xe3\x9b\xf6\xbfv\x08c\xe4Q\x9c\xdf\xc9\x81\xcfSt\xba\x02\x18\xc0pfq\xee\x9b\x02\xa98\x1d&\x85\xd7\xc4\xe4\xfa\xd6y\xa9\x95\xc5^W\x98h\xb9\xf4u\xb7\xa5(,\xfd\x0e \xb3V%%x\x89\x19}\x86\x00\xb7\x12\x0b\xb7\x1a5\x7f\xb8\x99h\xa8)\xa9\x00\xa2\xed\x8dq%`l\t+@\x0f7\x13\x0b\xefF\x8f\xb4 \xa3m\x19\x8a\x00bi\x1d\x82\x16\xc2O\x96 gY\x00\x96J\xc0NY\x08\xc3M8\x17\xef<\xe1\xfc\x19\xba\xa1Y\xa1/\xe8\x0fi\xf3\xf7\xber\xdaW\x92\xfb\x03\x87\xf6u\xe5\x0f\x90B\xdf1\x93\xb3\x8fSS\x8d\x85\xa1S\x15@?\x861\x9e\xa9\xad\x02\x1c\xb4\xfb\xad\x1f\xc6\xf9\xdf\xea8\xc3\xc4\xa3e\xfe\x94\xfb\x1d\xda\x16\xef\xcd\xe9\xfc\xe1&3|u\x995p\xba5 c\xed\xc8X\\\xf8#-\xe8\x91fb\xe1fb\xe1&bI\xe17\x14@\xb4}{|k$\x16\xdcA4dX\x02z\xb8\x99XhwR\x11\xe8\xd1Vb\xd1\xb6\x8e\n\xc7\xea\xd3N\xe0\xb3\xfb\x0b,\xcc\xfe\xec\xda\xbf\xca\x81#\x9d\xd3\x899ny\xc6a_\xd0\xf2\xac\xc5\xab\xce\xf8bf\x04\x93\x1e\xbd\x1c.)d\x81\x86\xe7\x7f39\xe7\xf7\x9d\xad\x04:M\x01\x9c\xc0\xc9LdZD\x80M\x9b?\x81\xf5C\x10B0\xe3x\xf3vS\xcfn)K\xea\x8b\x83\x9d\x97$\xb3\\\xf9\x00\x00 \x00IDATm\xce-\xce\xd3\xaa\xe2T\xb9d\x08\x7fb\x9f\x94\xf0\xc5\"\xad\xe8\xe1\x16\xf4\xf0nb\xe1f\xf4\xd0.\xa3\xe6\x0f\xed4\xcc\xff`\x9a\xf0\x07\x1b\xe3\xdb\x0eb\xc1\x9d\x86\x92\x08\xa7,\x81X\xa4\x05\x19iE\xc8X\x87&G.\x0b\xc0\x89\xe9\x9f\xa1Tl\xd2\xf7\x1e\xe3\xec\xd9\x14\x8b\xd5\x0e\xbd\xfe\x00F\xe7\xf0_\xf8\xc6O\xce\xb69\x9b\xa6\x15m\xd0\xe0\x87\xb38\xe7\xd9^\x8ct^\xb0<\xe9\x14\x05p$\xe7\x12\xa2.\x86\xa3\x00$\xf6\x0f\xca_e}\x89\x9b~h\xb8\x8f]4\x0ez+\x04\n:\xf8$\xe7i\x8bF\xb6\xf0g\x9b\xe5z\x04=\xb2\x1b=b(\x80h\xb8\x89XpW\xbc\xe6\xdfA\xb4}{\x9a\xf9\x1fW\x02\xed\x86\x12\x88f)\x01=\xbc\x1b=\xd6\x9e\xba\xb6\x13%\x90-\xfc\xd9\xb5>Yy\xd2\x8e[5\x01\xeaJ\xb0RS:\x03\xc7\xe5N\x93@\x00\xb7L7\xf6O\x98\xd1\xb1\xcd?z\xc2P4O.!\xcf\xad\x04\x04\x1c\x7f\x10\x93W\xf4\xc7\xe1Z\xe5yRt\x05p\"_\xc1\x83\x889\xbbW\xee\x07\xf4\x87\xff\\iyn\xd6a\xb3\x98\xd0\x13f\x0cr^\xbe\x01\xfb\xc0\xc0}\x9c\xa7W\xc5\xb1\x05\x90-\xfcY\xfbB\x80\xae\x87\x0c\xc1\x0f\xef\"\x16\xdcE,\xb4\x93Xh\x07\xd1`#\xb1\xf6F\xa2\xc1m\xc4\xd2\x9a\x00\xd1\xe0\x0e\xa2\xa1\x1dF\xba\xe0N#_\xb8\t=\xda\xdaQ\xe0\xd3\x95\x8e\xd99L>M\xd2e\x1c\x83\xcc?i\xba\xd2\x00\xfc\x0el\xc1b\xe2\xaf\x86\x99_s\x9e\xbeg\x00.\x9d\x00\xb7]s\xbb\xe9\xf9S/\x9c\xe5\xe0*NL|1j_\xa6\xad\x18\xc0p\xe7\x85sIQ\x15\xc0L.\xa4\x9d\xb0n\xef\xea\x9b \xf7\x83\x99\xfd\xf5\xe3\xa8\xa9\xb3\x9eR\x16\x8b\xb4s\xe5\xc1\xce\xcb\xa7y\xd5^\x007(\xb5\xe8\xb2j\xd5tE\x90<\x17\x0be\t\xff\x0eb\t\x93\xbf\xbd\x91hp\xbb\xf1=n\x05\xc4\x82;\xe2\x8a`\'zp\x172\xd6\x96S\xe03,\x0f+\xe17\xcb\x9b\xf6\x83;\xe45\xb1\x12\"\xed*\x0f\xa78\x0c\xd8G\xcd\x12\x986\x00v|n\xbe\x0e\xe5\xc9\xe7\x1dI\xf7^NV\x9fq\xf4V\x8c\x1a\xcf\xd4O\xfb\x15\xd9\x12(\x9a\x02\xe8\xc7P4\xa21\x91\xf3\xd7:k\x1f]r\xe5\x99\x1c{\xa6\xf5\n\xc2RJ\x16\xdc:Q\xa9\x8c\x89\xe5\xbc\x8b\x8aC\r\x90-\x8cf\xcd\x81T\xad\x1d#\x16iN\xd6\xf0\xd1`#\x91\xe0v\xa2\xc1\xedD\x82iM\x80\xb8e\x10\x0b\xed@\x0f\xefB\xca\xb0\xe5\xbd\x80L\xe5\xe3\xe4\x93\x8eyMk\xfd\xac\xb4\x89\xfd\x16\'1\x1c:\x81#\xbfb\xac\xd0\xe4\x94O\x1f\xbb\x04\xdd\xc2m\xf0\x96\x07\xaeb\x88\xa30u\x8e\x9a\x03\xe3\'r\xf8\x1cQ\xc4zZ\xdd\x85\xc9\x01}\x18\xccD\xa6\x87D\xce6\xbf3\xe9\xb8s\xceu\x0c\x1b3\xd06\xcd\x9b7\x8fSZ\xaa\xa6\xb3\x96\xa6\x12\x02\x16\xbf\x94;]\xc3\x98T\xfa\x0eV\x80\x89%`\xa4\xd1A\x0f\xc7G\t\x82I_\x01\x19\x1f.\x94\xd1V\xa4\x1e\x02\x19K*\x0f+\xc1\xcf\xd8O\xdc;\xd7\xa7\x89\xf5`\x95\xce,\xcf\xbaw\x9cY\x01\xfb\x1d\x9d;M\xbeL\x9c\xe5\xec\xef\x94`\xdd\xc2;\x18z\xb8\xf9\x84\xbe\x99\'M\xa6\xdf\xe0\xde\xbc\xfbz\xae5\xe1\x1d\xbd\x80cF2\xb1u\x15\x9f\xbeY\x8c\x886\x05W-\x1a\x1a\xfb\xf1\x85\xcfD\xce\t>\xb9\x7f\xbc\xcf\xef\xe5\x9e\x17~\x81\xd7g\xafG>{\xe6\xfb\x86\xbf\xbbCN\xbb\xbas\x84_\x85p\x8b\x85\x15`\xa6\x0c\x12\xd6@\xfa\x05d\x0c\xa9\x87\x8d\xb8\xffz\x18A\x14!d\x86I\x9f~\xdd\xec\xfd\x0c\x93\xdf\xad\xf0c\x9d\xaeC\x1e\x01\xed\x0ebbt\xef\xc4\x8e\xc2s\x15\xc3\xb4/\xfc\x93\xb5\x17\xdf\x94\x99\xfbs\xf7s?wp\x95\xdc/\xa2\x84\xdf\x9d\xccY\x0e\'R\xabQp\x05p\x04\xe7\\\" G\xb7Z\xee\x1f\xddwP/\xfe\xf6L\xee\x08\x1a\xe1\x96\xadl[\xf2\x94\xd3\xe2q\xf8\xb9P\xd3\xddq\xf2Nc\xd3{&\x82i\xa2\x0c\x92O.\xcb\x1a\xc8\xc8\x93ejg+\x13S\xc5\x92\xd8\'\xf3\xba\xd9\x8a\xc1V\xf8\xcd,\x80\xb4\xf3\xc9r\xc7?\x9c\xe8\xecI\xa7\xe5NS(\x84H-\xdf\xee\x84h\xfbN6,\xba\xc7\xf2\xbc\xa6\t\xeey\xe1\x17\x0e\x9c\x84r\xcbC+\x9e\xb9_\xe4Lw!\x88l(\xa8\x02\x98\xc9\xb9#5d\x8e\xc9\xb6\xb9\x7f\xec\xd1\xa7M\xe17\xf7~\xdf\xd1=\xdf\xfe\x8b\xf3\xb9D\xfd\xc7\xc0\xb0\xfd\x1d\'/\x18u\xbdr\xa7\x89\xc4\'\x0ce\x08^\xd6w#AG\xa1\xb6\xdb\xcc\xf2d\x1c3\xdb\'u?[a\xcf\xfetb)\xa4]\xdb\t\xbd;g4,Iu7\x98q\xa1\xf3\xf4\xab\xe6\xfd2>S\xd3\x9a\xbb\xffw\x03\xb5\xf5\xb9\xc6\xa5s?\x14\x1d\x7f\xd3L\xbe\xa4\xf0\xf4rS0\x050\x8bs5\r>\xb7O\x95\xbb\xec\x17|\xf7d\xce\xbb\xccY,\xe9\x8f\x1f\xfeJ\xeeDq\xbc\x01\x98u\x91\xe3\xe4\x05\xe5\x8b_w\x96.\xbd\x06\xcf\x16\xfe\xf4\xef\xca[\xf2\x06Y\xc7\xcc\xf6\xb3\xee\x87\x83O\xd3N?\x13\x0b \xfd\xda\x9f\xbf\xe2\xec\x99h%\x98\xad2x\x82\xb19\xe5\xcd[\xf6\xcd\x99\xe6\xf6G\xafa\xc0\xd0>9R\xe5\x96\x0f\r\xaf\xde\x17wAH\xcc\xafW\x00\xfa1\x04\xe1b\x89\x94l.\xbf\xf1\x02f\x9d49wB@\x8fE\xd8\xb5\xda\xb9#\xff\xd9\xd7\xbb,T\x01\xa8r\xe8%\xbanAJ \xad\x94\x81\x99\x99\xdf\x81\xf4\xbcVBoS\xfb\xab(\x01\xab\xf6>Y\xc7\xb2-\x80]\x1b\x9c=\x93R1\xe3B\xf08\x0cS+ca\x9a\xd6\xe7^\x06\xe9\x97w\x7f\x97q\x07\x8c\xc8\x91*\xb7\x12\x98\xc8\xe1\xf3\xb4\x02\xf5\xdf\xe7\xad\x004<\xec\xcb\xf4\x97s\xa7\xb4\xffa\xdf\xbd\xe1|\x0e\x98<\xd6\xf1}\x17\xde\xe6<\xa6\xe2l\'}1E\xc4i\x87c\xfb\x8e4\x13Y\x90\x92\xe3t\xa1\xcf:nU\xe3wP\"Y\x82\x9e]\xe3\xa7\xb7\xf1I\xcb\x9b\xddw\x90\xfd\x99-\xfc\x1d\x14D\xe2~i\xc7\x9c\x8e\xff\x1f\xa8\xb0\x9e@1Pyo\x16\xdf?\xdbQ\xba+\x7fw\x11c\xf3T\x02\x02\x8e<\x8a\xb3\xd5\xc6\xbc-\xc8[\x01\x1c\xc1Y\x83\x04\xcc\xb4Oe\xff\x83.\xba\xe2t\x0e\x9c\xea\xdc\x1bc\xed\xc25\xe8Qgo\xd1\x94\xb3\x9ck\xf2b\xb2\xef\x91\xce\xd2m[ja\x058\x11|\xa7\x8a \xedX\xfa\xf50\xd9\xcf8f\xf1\xe9\xb4_ q\xec\xa3\xc7\x9d=\x8b\xf1\x0ec\x06\x14\x93S\xac\x1dO;\xb0\xfe\x9d\xbb\x1d\xa5\xbb\xeaw\x171dd._\x01{\x99\xd1a\xf11\xccvX\xb5X\x93\x97\x028\x9d/\xa1\xa1\xad\xb7Oe_\xc6\xe3\xcf\x9e\xce\xf4c\x9c\xbb\xefm_\x16b\xedk_t\x94\xd6\xe3\x83\x91e\xb2\n\xdb\xfe\x0e\xe3\x1e\xefX\x91%\xa0YB\x9bm\r\xd8mvy3\x14C\xfay\x93}c\'\xad\xb6\xcf\xfaLOge\xf2\'>[\xb7\xe3x8\xdb\xa9\xe5TL\xeaz\x1a\xde\x82NX=\xdf\xf9\xea\xa67\xfc\xf5[\xd4u\xcf\xe5\x0bm\xff\x00bh\xe1j\xf2\x0b%\xe0Z\x01hxh\xc2\xbb\xda>\x95\xfd\x0f\x183q(_\xca\x8a\xeccG\xb8Eg\xe9\xb3\xdbq\xda\xdd0\xfb\x06\xc7\x97.:*/\xf3\xe7/\xd3A\x80-\xdb\xf56\x9b]\xb3\xc1I\xed\x9f\xa1\x84H\xe5\xc9\xfetj\x01\x08`\x89\xc38\x7f\'_\xe1\xfcy\x15\x1b\x15w\xf1\xed\xcb\x9d\x072\xbc\xed\xe1\x1f[\xc6\xb6t\x88\xf7\x8b|qz>\x17p}\xf7\x99\x9c=@\xe0\xdeQ9P\xed\xe7\xc77\xff\x9f\xe3\xf4R\x97\xbc\xf3\xf7\x1d\x10u\x96g\xcc\x14r\xe9\x9fN\xe7l\x87\n)\xd2\x1aw\x0cJ\x1c0\x13prl\x16\xca\xa0\x835\x90\xfe\xddl?\xfd\xfe\xa4\xae\xe1H\td\xa5\xf9\xf01\xe7\xcf\xaa\xbe\xc1y\xda\xce\xe0h\x87#9K\x9f\xb8L\xe9\xbaw=\x9b\xeb\xa5\xb0\x7f\x89[\xf1\xbcv\x14\xe7*\xdd3\x1dW\n\xa0?\xc3\x91\x90\xa3\x1f\xd7\xbe\xe0\x7fy\xf2\xa7J\xf7|\xe3\xb6x\xe8\x16\xf9\x99\xa3\xf4\x93\x1c\x86\x9e\xeeL\xbc\n\xc1\xcfW\xc6\xbbU\xcd\x04\xdf8\x91c\x03kE\x90u<\xfd{\"\xa3\xa9\xe9\x9fe=\xd86\x03\xb2\xd2l\xfb\xdcy\xe7\xdf4\xbb\xa9\xf5%\xa2\xefp\xe7i\x9f\xb8\xf7=\xa5k\xdf\xf1D\xae\x98d\xf6\xb2$a\x9d\xdbQ\x01W\n`_\xa6\\.lKe_\xe0\xdb\x1eQp\xb7\x02>z\xd8\x08\xc7\"\xf5\xc5\x8e\xd2\xef\xef\xac\x8b\xa0$|\xc9\xa1\x15\x00\xb0\xe4\xa9,\xc1\x04sk\xc0bK\xff3t8\x97u\xad\x8c\xef\xd9\xe7\xccj{\x91\xf9\xd9\xe1XZ\xfaP\x1b\xacY\xe8\xfcw\x0f/\x8bE\xb3:r\xbc\xc3\xb5|b\x1b\xfe\xc6\xda\x15\x8d\xb9\x13\xc6\xa9\xae\tp\xec\x99\xd3\\\x96\n\x04\x0c\x1e\xc5\x01\xaeB\x12)+\x80\x99\x9c+@\xdc\xea\xe6f\x00G\x9e4\x89\xban\xce\'\x82\xb7n\x8f\xd2\xbc!\xee3\x1au\xb6v\xf4D\'\xd3\xb2K\x84\xcf\x0f>\x87\x8bd\x02|\xfa\xa4\xf1\xe9T\xe8-\x95\x01tT\x1e\xd9\xc7\xd2\xbf\'\xf6\xe9(\xd4\x89\xf2d\x7ff[\x05\x02c9\xf4\xc5\x0e{\xfd\x01N\xbf\xc6y\xda\xce\xa6\xa7\x93I~@\xbf\xc0\\\x9e\xb8\xef\xc3\xf8B-\xce\x98\xfd\xf5\xe3\xa9\xae\xb5{1\xec+\xd5!\x8c\xddQ\x8d\x93\xa9\xc8\x99(+\x00\x01\xaf\xe5La\x81\xc7\xeb\xe1\xcb\xdf=\xc5\xf2\xbc\x19\x1f\xfc;=\x18\xdb\xea\x9c\xe9\xab\x0b\xee-]x\xce\xfa\x99Bbi(\x01\xcb\x0e\xbel\xb2je\xab\xe6\x83Y\x07c\x87\x8e\xbf4\xc1\xefp\x9c\x8e\x9f\x1dj\xfeV\xf8\xf0\x11\xe7?\xd5\xeb\x87\xea\xfcB\xeb\x15\x9d\xfd\x14\xa6\xe4\xfc\xf9\x86W\x94\xae}\xc7\xe3?\xc9\x91\xc2Z\xb6\x04x\xa7r\xb2r\x905%\x05\xf0\x05N\xd7\x04XO\xca\xcf\xa1\xa5\x9cL\xeeI\xe7\xfd\xff\xaa/\x11{\x84s\xef\xe0\x92!\x84s\xf7`\x00$|\xf2x<\xbaPB\xe8H\t\xa6Y\xe7`\xeafX\xd6\xfc\xe9\xb5\xbd\xa9\xb0\x9b\xed\xa7\xdd\x93\xecc\xa4\xd2\xeeX\x03\x8b\x15#\xfa~\xe9z\xb5\xf4\xa5\xc0\xa9\x02\xa8\xd6\xd6\x10\x8d\xea\xac\xf8D-\xaa\xe9\x05\xdf\xce+>\xdd\x92\x80\x93\x90\x9bi()\x00\x1fU\xb9&8[\xb2\xdf\xa41\x19\xcby\xe7\"\xd4\x1c\xa3m[\xdap\x9f\xeel\xc9\x9f^\xf6a\x03\xca\x86>\xc3\xa1Vq\x08\xf7\xd3\'\xa0u\x8b\xa2\xf9O\xa6\xc5`v\xdcN\t`\xb6OGk!\xfd:\x9f\xcc\x81\x95\x8a\xe1\xd6O\xbf&\xcd\x92(g\x1c\x96\xb1\x8f\xdf\xa8\xfd\xe7\xdc\xef\xac\xdf*\xc1\xacS\x0e\xc3\xe7\xb7\x9b\xfenk\x05x\x0e\xe7\xd4\xdc\x13\x13\xd2p\xac\x00\x8e\xe6\\!\xc0\xc6W\xd7\xfe\xc9|\xff\x97_v\\(\x80E\xf7f\xc5a\xd6\x9fS\xca\xdf\x158U\xc1\xcb,\xc1\xea7`\xe9\xb3\xa4\x99\x00\xe6\x9b\x99U\xd0A\x11d\x1fK\xffN\xc7\x9a>C\xe0I\xe5I|\x86\xdba\xd1\x7f\xa0=\xebO\x97\x8b\xd1\x87\x95\xbf\xe9\x9fN/\x07\x11\xa7{\xf9\x17$\xf7\x1f\xbfW!\xfc0\xc6\xc4!\xb7\x08x_\xc5\np\xac\x00tP\x18\xc5\xcd\xe4|E\xb3f\xdbR\x93pK\xf2\x8d\x9c\xf9\x9czl\x95\x13\xaaA(\x00\xa2A\xf8\xf8Q\xd8\xb9\xda\xba\xe67U\x08X\x0b}v\xedoe\xee\'\x05>K\xf8\x17?\t\x1f\xb9xC\xeaz\xc1\xe4N\x9c\xf3_\x08\xc6;p\xbd\xd1D*\xd8\xc1\xda\x15;\x88E\x9dG\xab\xf2\x07|\xf4\x1dh7\x87\xdc\xb6\xb2\xf5\xcd\xe0\xd4~N\xef\xe5H\x01\x0cb\x14\x02lz\xefl\xcc\x12Mp\xd4)\x879-\x0f\x00\xcb\x9fo19\xda\x9c3\xdf\x882\x1d>\xb2bw#\xbc\xa5\xd0I\x96\xcd\x86wa\xf1#\xd0\xb4\xce\xc4\x08\xb0P\x08\xc2D\xe8\xb1\xfbn\xb6O\xeaZ+\xe6\x19\xb5~\xc8\xecO\xe6\x80\xda\x9e\xb0}\x9d\xbb\xbc\xa5\xa2\xffh\xf5<\xf7\xdd\xfc\xa6R\xfa\xdf\xdc\xe7,\x1e\x86\x191X\xe5\xd4/\xc0Q(\xc41\x8c=\x14\x97>\x03\x97]\xebl\x96T\x82-\x1f;\\\xdf\xdb\x84^\n\xe1\xc0;\x1b)\xa1q-|\xf2*lp\xdd\x93b\xce\xda\xb7\x8c\xad\xe7p\x18|\x88\xc9\x1cz\x13\xfd,L\x8eg\xb7\xc1\xd3\xbf\xa7\x9b\xfd\xe1\x16X\xf2\x9c\xfar\xdafl\xf9\x1c^H[$\xaeG\x7f8\xe8x#xK\xb9\xf6\t\x04j\xd5\xf3\xecn\n\x11\x8d\xc4\xf0\xfa\x9c;\xec\x0c\x1e\xd9\x8f\xf5+\xad\"\xa7\n\xac&U\x08\xa8>\x9e\xb3<sx0\xa7\xcf|N\x05\xe0\xc7\x8f\x87\xee\xaf\xe6JgZ\x10Mp\xc8t\xa5>\t>\x7f\xc9\xe1Z\xda&\x94\x93\xfb\xe8\xb6\xd5\xb0\xf2=\xf8\xfc\x9d\xce\xbb\xe7\xce\xd5\xc6\x06\xd0g\x1c\xf4\x1b\x07\x1e\x7f\x9a\x9c\x9b)\x82\xecc\"3Y\xe2|\xdb.C\xc9\xb4:\xf7oq\xc5\xae\xcd0\xef\xde\xccc\xfdG\x1b3\x03\xfb\x8f\x06Q\xd2\xf5\xac\xf3\xe3?\xb7\xbf\xcdW~\xe0<\x82\xd5\xcf\xff\xfam.:F\xcdc6A\x10\xcfC\xc0\x99\xb9\xd2\xe5T\x00\x87s\xba\x07\xb0\x89gd\xad\xa6O\x9c\xad6\x9f\xb3iCD)}\x87\x92t\xf2\xcb\x91\xa8\xd5\xd7/\x85\x95\x8b \xe8\xd2\x0c.\x06\xdb\x96\x1a[\x82n\x03\x0c\x0b\xa1\xb6!^\x83eHy\xea\xab\x1e\x83\xf6fh\xd9\n\xdb\x96C\xc8\xe1\xb2\xd9\xc5d\xf3\ncKG\xf3\xc2\xa8Ca\xd08cD\xc5\x17(I\xd1\x94\xd8\xd9\xd8\x86\x94\x12\xa1`\xdat\xefUG\xd3\x0e\xab\x17\xcb\xda\n\x00y\x92\x9f\x00a\xec\xcd\xb4\x9c\n@\xa0\xdd\x91+\x8dEF\xce\xf8\x9a\x9aO\xee\'\x8f\x94\xc1\xdb\x96E\xeb.\xd8\xb9\xd1\xa8\xd1\xd7~\xecl\xa9\xefr\xa4y\x93\xb1\xed)\xe8QX\xbe\xd0\xd8\xb2\xf1\xfaa\xd0x\x18<\x1ez\x0e\x84n\xb9\"qu\"\xaf\xccY\xc6\x91\'9\x0f|s\xedm_\xe7G\x178\\\xc14\x13\xfft\xce\xa8{\x99\xfbm\xab%[\x05\xe0#\x00`3~g\xad\xc9\x06\x0eU\x8b\xe7,\xf5\xce]\xa2\xb7\xad\xc9\xe8\x84k\xd9\x01;\xd6\xc3\xd6\xd5\xd0T&\x0bUT\xc8\x8fh\x18\xd6|hlVT\xd5A\xdf\x11\x86\xf5\xd0\xad\x8f\xd1|\xac\xedY\xfc~\x87\x0f\x16\xacSR\x00\r}{\xa0y\x04zL]>\x04\xbc\x0f\xd8z\x07\xda*\x80#9\xc3\xa3\xdb\x9a\xff\xd6\xfc\xf8\x96K\x94\xd2\xafx\xd1}\xdb?\xc1\x92\xd7`\xf76h\xdan|\x96\x93I^\xa1\xbc\x08\xb6\xc0\xda\xc5\xc6\xe6\x04\x7f\x15\xd4\xf71\x94E\xbe\x16\xc5\x8em\xad\xf4\xea\xe3\xbc\'\xf1\xa0\xa9\xe3m\x16\x19\xb1n\x06H\x18\xec#@\xc4\xa6\x19`\xdbj\x8e!\xbe\xeb\xb4\x90\x19\x17\xf5\x08j\xeb\xd4\xf4\xc6\xf6\xa5a7\xb7\xca\xe0\xfdga\xc5;\xb0m\xd5\x9e#\xfc\x9a\x07\x8e\xbe\x14\xce\xcc5c\xb4\xcc\xe85\x08\xce\xfc\xa9\xf3\x80\xa8\xe5N8\x08\x8d\xeb`\xd5{\xf0\xa1\xf3\x98\x1f\xa6<\xf5o\x1b\xd3\xc4\x84o\xfd\xcc\xdd|\x7f\x01U39\xddv\xea\x99\xad\x02\x10H\x9b\xe9w\xd6\xb6\xd2\xf01j\xe3q\xd1\x90s\'\x89\xbd\x8dsn4L\xd5@-\x9c\xf7k\xc59\x04%\xa0\xbe\xc1(\xf3q\xdf\x86@\r\x9cqMiB{\x973;\xb7\xb7)\xe7Q\x19>L\'\x8af;\x8c`\xf9\xa7\x19\xc7x\x00W\xe14U\xdd~\xd7\xbeY\x06\xcb\xc4\x96!f\xb3\x06\xfb\x0c7\x14\xc1\xa9W\x19\xcb[\x97\x0b\xfdG\x1b^\x8d\'_aX-\xe9\x9c\xf3\xcb\xd2\x94\xa9\x9ci\xde\xa5\xe6\xef2\xe1\xa0Q6gm\x1c\xf1\x90\xdf\xd3l\xeay\xcb3\r\x8c\xad\xc1\x85\x02\xd04\xe1`\x15\x94L\xb6,\xce\xedQ\xb2)\xff.\x82\xb2\xe1\xd3\x1dp\xcb\x07\xf0\x13\x9b \x193\xbel/\xe0\xb5=\x0c\x05q\xde\xafa\\\x89\xa2\xe7z\xfd\xf0\x85\x0b\x8c2\xcc\xba\xd8\xbe\x03\xcd.\x1c\xda#+\xe0\xa7o\xc1;[\xe23\x1e\xf7\x02^}v\x99R\xfa\xef\xfe\xfc|W\xf7\x91\xe0\xd3l\xba\xfa,\xcfTQ\xf3]7\xab\x91\xd6(\xb6\xfd\x9d\xf2\xc1v\x18\xe0\xc2\x03\xab\xd4|\xb6\x0b^\xdd\x08od\r\xc1\x1d\xd4\x1b~9\xc5<\xcf\xc4Y\xc6\x10\x96S\x0e>\xc1\xd8\x00\x96\xbe\x0e\x1f\xbe\x00\xb1\xfc\\*,\xe9\xd1\x1f\x0e>Q\xdd\x1d\xd6\xeb\x87\xe3\xbe\x03\xcf\xdd\xde\xf1\xdcY\xa3\xa1O\r\xdc\xf1q\xe6\xf1\x03{\xc3\xb4\xfe0\xa9o\xf9z\x05Z\xb13G\x9d\xb6\\q\x9a\xb0\xa6i\xaeF\x03\x04\xf8fpf\xe0e\xee7-\x91\xa5\x02\x90\xc8\x9f\xda\x19\x16V\x1c\xfa\x055\xcf\xbf\x96\xad\xceV\xf5\xfdp;\x1c\xdf\xc9\xeb\xc4\xa9\xb0\xaa\x19\x16m\x85w\xb6\xc2\xd6\x1c-\x9a3G\xc2\xc9#\xcc\xcf\r\xdd?\xbf\x90f\xe3\xa6\x1b[\x82\x8dKa\xcdG\xb0i\xb9z\xc7h]\x83\xe1h3zraV\xe9\xed5\xd0\xb0l^\xfdg\xc7sG\x0c\x84\x91\xdd\x0cK \xc1\x07\xdb\x8d-\x9dz\x1fL\xee\x07\x074\xc0~\r\xe5\xab\x18\xde\xdf\x06\xdd\x0b\xdc\x01Z[W\xcd\xee&\xf5\xfe\x03\x01\'\x01\x8f\x9a\x9d3U\x00\x1ewM\x7f@}\xe6\xdf\xc6\xf7\x9c\xb5\x85\x96*N1-4\x91\x18\xach\x82Ov\xc0\xa7;ae\xee\xb9I\xa6\xfc|2\x0c\xb5x1\x86\xee\x0f\xd3\xdd\x07x5e\xe08cK\xb0\xf0Q\xc3k\xd1\n\x7f\r\x9c\xe5\xce\xfb\xd4\x11\x83\xc7\xc3\x17\xce\x87\xd7\xfe\xd3\xf1\xdc\x90:\xf8\xfb,\xb8\xd8f\x9d\xa9\xdd\x11xi\xbd\xb1e3\xb0\x16&\xf4\x841=`\\\x0f\xe8^B\xef\xc0\x0f\xb7\xc3\x8c\x1c\n\xa0qk\x0b\r}\x9d\x87\xf1\x1aw\xe0\x08\xdey\xe5\x13\x8b\xb3v\xc3\x81\xe2>T\x14\xc0 \xc6\x01(\xc4\xb0\x8d\x17A\x08<9\x97B\xce\xa4qY\xfe\xc3\x7f\xf9\xb2#\x08\xabw\xc3\xeaf\xe3s\xcdnh*B\xb1\xee\xb3\x89&3v\x1a\x1crr\xe1\xef\x99\x8d\x9d\xf0\x03\x84\xdb \x12T\x8b[\xa8\xca\x90\x89F\x9f\xc1\xcb\x7f\xefx\xce#\x8c\xe7t\xf1\xcb\xa0\xea\xfb\xb2\xb1\xd5\xd8\xe6Z,US\xed\x85\xe1\xf5i[7\xe8\xa7\x16@\xc71\x1f\xef\x80\x19\x16V^\x82\xa5\x1fl\xe6\xf0c\x9c\xb7\xa5\xbe\xfc\xddSm\x14\x80\x1dR\x13hH:\x8e\xb6\x99*\x80\xd1L\xf4\x0b\x873\x053.\xe6r\xa8\xa2P\x84b\x860ok7\xcc\xf0m\xed\xb0=\x08[\xdb`s;DJ4\xda\xd8\xaf\x1an\xb2\t\xfaz\xc8)0\xd6\xf9\x1c\x11\xd7\xcc\xbf\xcfY\xba\xc7~U\xfc\xf5\x14\xfb\x8f\x86\x93~\x08\xcfXx\xb9\xfe}\x16\xfcc)\xcc+\xe0\"\xa2\xedQX\xb2\xd3\xd8r\xa1\x01}k\x0c\x05\xd1\xa7\nzWC\x9fj\xe8[\r\xbd\xab\x0ceb\x87\x13\xe5\xb5\xe8\xb5\xd5J\n\xa0\xb6\xbe\x1a!\\u\x94z4<\xc4\x9c*\x00I\xeb\x00\x81z\x8f[}\x8f\xe2\xf6\xd2}\xf5\xa5\xa2^\xbe(\\\xbe?\x1cd\xe39v\xfcw\xa1\xe7\x80\xe2\x97C\xd7a\xa3\xc9\x92\n\xb7~\x00\xdf;0\xf3X,b\xcc\xca\xeb\xe10\n\xae[\xba\xf56|\x06\x1e\xb0pr\xfa\xca88m\x04\\\xae\x18^\xac\x10\xe8\xc0\xe66c+\xda=\\\xb8\xbfk\x1e\x0f\xb1\xa8\xf2B\xdc\xbec8\x8d\xff\xf1p\xc7\xeb\x99\xa5\x16\xd4\xfe@\xb9d\xc0\x90\x11joL\xa89\xef\x15\xc5\xcb\x16\r\xc3\x94\xb5\x13\xfesn\xec\x1c\xe1\x07x\xf4\x17\x1d\x8fI\t\x1f4\x9a\xbf\xe4\xcf\xfe\xb1\xf8e\x02\xc3g\xe0\xbc_[\xcf\xe4\xec\x1e0\x9ec\xbf2\xf2y(%>\x9f\xb2a\x8e\x00-\x84\xd7\xb4G\xc4B\x01\xf05\xdb\xcbY0\xfdX\xb5\x90<\xad\xdb\xf6L\x05p\xc9x\xb8\xc7\xa6\xbd\xafy\x8d\x97>\xdba\xa6XlYi\xb4\xeb\xb3\xb92\x1e\xb6\xee\xea\x05\x1d\xcf\x01\xbc\xad\x18\xd57\x1f\xce\xfd%\xf4\x1eb}\xfe\xa6i\xd6\xc3\xa6{\x13={\xbb\x1bZ\x18H7\xd3q\x1c\xab\x1e;W\xaf\xe6A\xd3&(\xa5oZ\xefl\x08\x10`@m\x19\x8f\x01\xc6\xa9\xf3\xc1\xbd\xb3`\xbaMd\xe2\tG\xc09&\xb5q1y\xe9\xae\x8e\xc7v\x86\x8c>\x92\x04\xafn\xec\x98f\xc5[\xc6\xcc\xba\xce\xe2\x98\xcb`\xe6E\xd6\xe7\x07\xd5\x1a\xd6\xc0\x01\xbd;\xafL\xc5fw\x93\x9aG`\xdfA\xee\xa2\xdel\xa4\xd9\xf4\xc9\x9a*\x00W\xceX\x02\xa5\xb0\xdf\x00Mk\x9c{\xab\x1c\xd8\xb7\x0c\x16\x8b\xb7\xe1WS\xe0O3\xec\xc7\xa5\xcf\xfa\x19\x1cx\\\xe7\x95\t\xe0\xf1\xdf\x98\x1f\xff~V\xbb\xfa\x9e%\xe6\xe9\x1eR[\xca!o\x06\x8c1\xac#;\xbe\x7f\x00\xdc5\xb3s\xca\xe3\x96:_\x0fG\xe9vlUsq=d\xba]%k+\x7f\xa61=;(\x00\x8fz\xe7\x7f\xfc\xd6\xea\x1e\x19\xc1]\xce\xbb\xe5\x0f\xecc\xb3\x1eI\t9g\x8cQ+\r\xb4\xe9\xff\xec1\xc0x\xa9;\xdbw\x7f\xf5\x87\xd0\xde\xd4\xf1\xf8\xc3+:\x1e\x03\xb8\xca\xa2)\xf0\x8a\x89\xe3N\xb1\xc9\xe5\xe2\xec\xd3\x8c\xe7~\xc5\x81\xd6iJ\xc9\xc8\x1e\xce\n\xd6\xb4Sm\x1e\xcc\xb8\xfds\x8c-Z \x10\xe3\xcc\x8e[I\xbb\xfa\x92a\x8a\xb5\xbf*c{\x956\xe4\xaf&<Ll\x98\xc2\x01}\x0egh\xf7q\x0c\xa9\xddF\x15W\xe5\xccw\xca\x8f\x8c\xd0\xd7\x9dM4\x0co>`r\\\x879k\xcc\xf3li3<\x1aGd-\xaf\xb6a\x891\x15\xb6\xc1\xa6\x8d^\x0c\x0e>\xc1\xb0\x98\x1e\xb0Y1kb\x83\xa1\x08\xb6\x87Ney\xcb\x0c6\xb5\xacdu\xf3\xc7\xac\xdc\xf5\x11-\xe1\xd2\x85o\x1a\xde}\x7fG\xe9\xb6nP\xf3(\xeb\xdd_q5\x998\xd2\xc2\xae7U\x00\"\x87-a\x86\xaa\xf9_N\xf4\xae\x1e\xc0\x98\x1e\xfb3\xba\xe7\x01\xf4\xaf\x19J\xbf\xda\xa1\xd4\xf9{\x002\xf1\x8fT\xc3h\x0bU\xf2\x1cD\x8e\x86\xd2\xa0\tp\xc4\x85\xc5-\xb7\x1dV\xa6\xfb\xff\xcd\xb3\xcfw\xc3;\xe6\x0eK\xcf\xff\x19f\xff\x02<\xee\x0cD\xd7h\x9aa\r,\x7f\x0b\xde\xb1\xe9\x94\xec\x1dx\x92\xde\xfe\'\xd9P\xfb\x1d\xc6\xf7\xfe?\x92\x7f\xb5\xe4\x9fI\x12\x8a\xb6\xd1\x18\xdc\xc4\x8e\xe0&6\xee^\xc1\xba\xdd\x9f\xd1\xd8^@G\x834\x86tw\xd6\x1f\xa6:+\xd0-V\xd2i\xe1\x07\x80\xba8\x97\x81S\xb6O\xf3\xd3\xaff\x08\x03\xea\x863\xa0v8\xfdj\x06\xd3=\xd0@\xcf\xaa\xbe\xf4\xaa\xea\x83\xd7\x13\x88\xbf\x17&\xfaP&>2\xc5=\xc5n\xaa\xe4i\x08r\x8f\\\x9csc\xe7\xf5\xf0\x9b\xf1\x88\x85\x13\xcf\xed\x1f9\xeb\xdf\xf9\xf6\xabF\x7fF6\x0f\xfe4w\xfb\xbcX\x8c9\xcc\x98\x93\xf0\xe8/\x8c\x15\x88L\x110\xa8\xeav\x06r;k\xdb\x7fB\x9b\x9ei\xf5\xfa\xbd5\x0c\xa8\x1b\xc5\x80\xba\x91LhH5)3\xdf\x06\x89\x94\xa0\xcb\x18\xbb\xc3;h\x0e\xef\xa0-\xd2DSh+\x8d\xed\x9b\xd8\xd1\xbe\x91\x9d\xa1-\x84c\xf6\xa6\xbbGx\x1c=k\xd5N@\xc0>\x16\xa8\x05\xd2B\x05\x14\xcc\x02\xe8\x0c\xf9\xff\xc7\xf1oe\x88\xa7\x94i\xfb\xc9T2C\xebg\x1cwsS\xb9\x83*\xceF\x90\xbb\xc3\xf2\x88/\x1b\xc1(K\xc9\x8bw\x9a\x0b\xc8\xcafxw[\xc7\xe3\x17\xedw\x03\xf7,\xce4\x17Z\"\xf0\xc8\xe7p\x96\xc9\x14\xf4\x87\xae\xb3\x9f\xda[L\x840:R\x83\xbb\roE\xcbt\xc0\xb0\xea_\"\x81\xb5\xedW\xd2\x1a\xdbO\xf9^\x9a\xf0\xd0=\xd0\x9bn\x81\xde\xf1{\x0b\xe3\r\xca\xaa(\x92\xfb\xc9\xe3\xa9\xff\x9d\x10jw>\x12\x96\xc0\x85\xfc[Z\xacV\x06\x9d\xba\x02p\xd1\tX\xdeD\x08\xe8\xc78\xaa\xf1\x13\xa4w\x96Uw\x83CO\x81!j\x93#\xf3\xe2\xddg\x8cph\xd9\xe8\xd20\xed\xcd\xfeBcz\x1eH\xdf\x9a!lm\xcb\\\x9e\xe7\x99\xd5px\xff\x8eS\xb0\xa3ax\xe6f8\xc9\x95\xab\x98;\x9a\xb6\xc2\x1b\xf7\x1b\xde\x89*\x18\x8a\xe0\xb7H`U\xdb\xcfh\xd7],\xe9Sdb\xb1\xd2F\xc3\xaa\x04k\xb2\xa0J?JI\xf8\xb3io\x86\xd7\xfe\r\xff\xfd1\xbc|O\x01\x0bf\xc1\xe7\x8b\xe03\x8b\xe5\x13\xbf\xf2\x92\xb9\xf0_=\xd9\x98\x8d\xf3\xbdCL&\xe9c\x8c\n\x98y\xab6o3\x9f\xc8Sh\x16=e<\xbf9\xb7\xa8\x0b\x7f:\x02\x18YS\xe4\xc9\r.\x91\xae\"\xa0\x14\xae\xb2\xb5R\x00\xca\xa5ri`\xef\x15l^n\xbc\xc8\xeb>\xce\x9d\xd6\rk>\x82\xb7L\'{\xc2\xa5\xf3\x05\x1e\x93\xf7\xa5G\xa0\x0f\xdd\xabR\xe6\xeda\x03::(h\x02\xbe\xfc\x92\xf9\xcb\xb6y\x05\xbc\xfa/\xd7E\xb6%\xd4f<\xafe\x16\xc3\x92n\xe9\xe3{\xba\xb0\x17,\x00\x81*7S\xef\x0b\'kV\x8e@\xeaw\xa8\xc8\x7fN^\xfb\x8f\xd1\x9b^HV\x7f`\x98\xc7f\xfc\xe4-\x08E\xcd\xff0WM\xbe;\xe3\xfb\xa9c\xbea\x9a\xce+$\x17\xbdl\xae\x04\xd6\x7f\n\xaf\x14X\t,\x9ek>o\xa1\x104F\x8e)\xce\x85\xf3 \x90kZa\x81P\xea\x04\xc4\x8d\x05\xb0\x87\x05s\x0b\x89\x9b\t\xc8\xcc\x86n\x8c)D\x99\x84d8\x88j\xa4\xf4\xf1\xafO~Cc\xf0s\x06\xd7\x19.\xc0#r\x05\x81XW\xb86\xf4go\xc2\xbb\x16\x95\xda\x1f?\x82\xb5\xbb1\xad\xfdO\x1cy\xb11\xad4\xeb\xf8\x8f&\xdd\xc9\xef\xde\xb9\xb4C\xfa\x98.\xf9\xd6\xab\x82;ft\xfc\x1bo\xf8\x14\xe6\xdei\x84.\xcf\x97\xf7\x9e\x81\xa5\xb9W\x81g{;\xcc\xdb\x08\xab\x9a@\xa7\x8e\xd9\xe3\xae\x01\xa2xD\x10\x9f\xb6\x85\x1a\xcf\'\xd4{\xdeE\x13\xa9\x8e\xdb\xc6\xf0\xb1\xe8\x94\xdf\xfaa\xf5\xdd\xd5\x03/\xb8k4\xa8\xf9\x01(\xf7L\xeci\n@\x8aC\t\x8aW:\xf8\x01$~\xe5G\xdb^\xe7\xaf\x1f\xa6\xe6\xb1~\xb6+3J\xcd>=\xe0\x9aC\xcc\xaf\xdd\xbc\r\x16<\x02S\xcfr_\xbe\x05\x0f\xc1\xaa\xf7\xcd\xcf\xdd\xb7\x14\xde\xd9*\xf0\x8a\x8e\x7f\x13\x8f\xf0\xf2\x85\xc1\xa7b\xf6\x1a\xf5\xac\xea\xcb\xd0\xfaq\xac\xdd\xbd4\xe3\xb8\x10\xd0\x14\x96\xfc\xf0\r\xf8\x83\x89C\xe6\xd6U\xf0\xe4o\xe1\xd4+\xdd\xfc\x12\x83\x9d\x9b\xec\x85\xff\xaeO;\xc6U4h\xe1\x86\x05\xd7p@\x9f\x99\x1c?\xeab\xd0\'\xb0+:\x133?\x80r\xa4G\x83\x8b\x88$\x05\xfc)VM\x80\xbd^\x01X\xb1\xb5m\x03\x97\xcd\x9d\x99!\xfcf,\xdd\t\x17\xcc\x15\xdcj\xb1\x06\xc4\xaaw\xddG\xc0}\xf6\x8f\xd6\xc2\x7f\xffr\x98\xbb\xde\\\xf8\x01~1\xfd\x11\xdbk\x7f\xe3@\xf3\xc9\x03^\x01[\xda\x85\xa5\xbbp\xeb\xce\xfc\xe6\r\xfc\xef6\xf3\xe3/o0\x9e\xa3\xd9d\xa5t>\xdc6\x8f\xdf,\xbc\x80\x0f\xb7\xccw_\x88\x12\xd0\xd0W-\x86F$\xec6\xda\xaby\x13\xa0\x83\x02\x90\xb8\x1b\xd2s\xb3\xb6_M\xef\xd2F\x10R\xa1%\xdc\xc4e/\xcd\xe2\xfa7\xcf\'\x97\n\x8eJ\xd0\xe3\xcfp\xd16\xc1%\x16\xdew\xf7\xdb\xb8\xb8Z\xf1\xd0u\xd6=\xe2w\x7f\ns\xd6\x08\xac\\P.\xda\xef:4\x07K(\xfft\x9aI\xc0>\x8c\xfe\x80\r\xad\xa2\xc3D\xa2\x04\xd1\xb0\xd1y\xa7\xaa\xd8\x1e\xb5X~\xe6\xba\xb7\xe1\x9e%\xc6s\x94\x08\xa22\x97\xff%\xfco\xd5\xdd\xdc\xb4\xf0\x02>\xdf\xa5\xb6\xfaN\xa9\xe8\xdeKm\x82\xc8\xf2O\xd6\x16\xf4\xfe\x1d\xde\x06\x9d\xa8\xab\x1e}7\xb5Y]\xffN\xf6+u\xc1\xaeP#\xdf~\xe9(~\xf4\xea\xa9Hio\x18E%D\xa5 [\xdb\x06c\x82o\xbff\x92A\x1a}\x02N\x88E\r\xe1\xb2\x9a\x9e{\xd3\xfb0\x7f\xa3!\xfcfNY\xc3\xbb\x8dgl/\x8b6I\x16U\x9e\x1a\x8e\x1b\xf1U\xd3s\x1e!\xd9\x16\x14|\xf3\x15\xebJ\xe2\xfek\xd4VQ\x0e\x99L\x88\xbb{\t|\xde\xdc\xf1\x1e1)\xb0\xe8\xd7\xcc\xe0\x91\xa5\xbf\xe7\xa6\x85\x17\xb2|\xc7\xbb\xce\x0bR\x02\xba\xf5PS\x00\x9f\xbck1\x93+\'\xd2tA\xb3\x82\xfa\x01\xb4\xb5\xa8\xcdl\xea>\xb8|\x15@D\x8fp\xd9\x8b3\xb9\xfa\xb53\x88Ig\xdeZ^a\xd4\x92^!\rAL;\xb7+$Xc\xb2\xfa\xf9\xf3\x7f\xc9}\xdd\xcd+\x0c7\\+~\xf0\x06,n4\xc2>\x9a\t\xbf@\xe3\x9b\x07\xfd6\xf7\x8d\xd2\xf8\xc2\x90\xd3\xe8[\xd3q\xf6\x8f\xc0P\x02\xbb#\xf0U\x8b\xd1\x010\xfa\x04\xec|\xf7\x13<f\xb1j\xd0\xfc\r\x99\xd7\xf6 \x93\xcf\xd6\xab`\xa0>\xbe\xfcV~\xfb\xd6\x85\xacm\xb6\x98\xef\\b\xba\xf5T\xeb\x04\\\xf1\xa9\x9d\x05`\xad\x19%\xd2t\xa0\xd8J\x01\xb8\x9a\xa1\xb0p\x9e\xc3\xa5V\xe3T7\x94o\x13\xe0;/\x1d\x85\xae\xde\x15\x92D\x08CP\x12\xca\x00\xe0\'o\x99\xbc\xb99j\xb3\xff\xfd\xc9\xde\xe9\xe6\xe2y\x82\xad\xed\x02\x81\xb4\x9c\xc0\xf1\xeb\x19\xeeB\xfb\\~\xe8\xed\x98\xb5\x1d\x05\xa0!\x89\xeaF\xfb\xdc\xca\xfa[\xfe\x96\xf5\xbc\x84\x04fk\x15|%\x1e\xfbQK\x13\xfa|]\xcd\x1fXR\xa2I\x0c9\x10\x8a?l\xd7v\x93Z\xc4\xc9}\xd0\xe6\x98\x1d\xb7R\x006\xa3\xd5\xd6o\xec;\xaf**\x80^{\x87#\xa2\x88[\x06\x02\xc9\n\x93\xf9\xf9O\x9aT\xce\xban\x98\xfc;-&\xab\xe9\xd2\x10\xbeP\xcc\x18\xe21\x1b\xee\x03\xf8\xc5\xf4\x87\x94_\xb2\x8c\xfc3\xcc=\x8c4a\x08(\xc0\x85/\tvZT\x19\xe1v\xe3w\xb4\x9b\xbc\xb7V\x9e\x8b1itb\x16z\x82\xe9\xc2\rO\x15\xf6\x82%\xa0i\xa7\xbbe\xaf%\xd2\xd4<7\x95@\x9d\xed\x7frs\x93\x1d[L\xden\x1b\xf2y1\xbb\"\x1e\x01\xbf4\x89\xcb\x9f\xdd^^\xf2\xaa\xfd\x1c\xf8\x8d\xad)\x0f=;\xe1\xbfb\xd2\xdf\x08x\xf2\x8bB\"\x10\\\x7f\xf8C\xa6\xe7\xd2\x95\xc0w^\x17<gc\x9d>\xfe+x\xe1\xaf\x99\xc7\xde{\xb6c\xbao\xbd\x8a\xe5\x08F\xbeL\x1ap|Q\xae\xdb\x99\xb8\x9c;\x10\xab!\xe6|i0\x8d\xde\xae\xd6\xe1q\xab\x9d\xca\x91k\x0e\xbb\x9b_\xbduI\xc6\xb1\x83\xfb\x1e\xc9\x01}\xa63\xb0~$>\xcd\x8f\'n\xdc\x87\xf5v6\xb4\xacb\xfe\xdaGY\xd5\xfc\xa9\xedu\xad^\xed\x84\x19\xfd\xd0u\xf6\xeb\xfa\xfd\xf9cxs\xb3!\xf1\x9a\x8d\xd9\x7f\xf1~7\xd0\xb7f\x90\xcd\x1d\x9d\xe3\xd5|\xfcd\xea\xbf\xf9\xe5\x82\x0b:\x9c\xd3\x04 %:\x82\x7f/\x13<\xb7Vr\xeb\xf4\x8e\xd7\x00\xd8\xbe\xc6\xb0\x06f\xff\x1c<>0\xebSmu0\xca\xd5=\xd0\x97\xa9\x03OfP\xfd\x18|\x9a\x1f\x81FL\xea\xe82\xcc\xce\xe0\x16\x96\xef|\x9fO\x1b\xdf \xaa\xa7.6m\xd0ix4\xf7+^\x15\x037N@\xba;\x05\x10\xfd\x1f\x8f\x9b\x9e0}}\x8e\xe3<\"\xc8(\x96\xc1A\xcd\xdf:\x8fW\xe3\xaeg\xd5\xe6\x8a.\xb8m\x87\xb1c\xeap\x93\x19\x90\xc3\x98\x92\x99v\xd6\xcdt`\xa5x\x00\x1d\x03\x828\xba\x8f\x84M\xad\xab\xf9\xd5[\x17\x9b\xfe\xe6/\x0e\x86\xf3\xc7f\x1e\xf3\xfas\x07\xe0\xbcd\x9e \x18\x9f\x9fd\'\xfc\xb3\xc7}\x9fC\xfa%\xa2zt,[\xc7\xe3\xd9SZer~w\xfa\xf1\xa6\xd0\x0e~\xf7\xb6\xf9o\x92\x18\xa6{\x82\x7f\x1cem\x99\x80\xb1\xee`Kc\xe6\xb1\x88n\x1d\xb0d\xf6\xd8\x1f1\xaa\xe7AY\xbf&\xfe\x7f\xbc\x88\t\x83\xb2\xe3;\x92\xfc%\xa9\xfd\xb4\x1fo\x16\x0f \xfb\x8c\x9b\xe9\xc0\x1d\xdf\xa1\xcc\x9c\xd3\x8f\x1d\xc5\xa4\\\xcb\x07eq\xd11v\xeb\xb6Y*\xfb\xb6\xf9<R\x1b3\x99\xd2n\xda\x04x\x91\x87\x91\xa0\x1c\x0f\xd6\x8dy\xd2kdyi\xe5B1\xa0v8\xb7\xcf\x9a\xcb\xe5\x07\xdf\xda\xe1\x9c\xd9\xd2Uv\xc2\xbf\xad\xddh\xef\'\x84\xdfc#\xfcg\x8c\xb9\x8cC\xfb\xdb\xc4$\xcf\x83n\x81\x9e\xfcp\xd2_M\xcf%F\x07\x12|\xe5%\xc1\xcb6\xc1v\xb2\x85\x1f:\x06*\x058l\xc0\x89\\3\xf5\xbf\x8c\xeaY\xda\x90p\xc5`\xc4>j\xe1\x8d\xdf}\xc3\xde\xba\xb4B\x02f\xc2\x0f\x16\n \x9e\xd8\xd5\x84\xa0]\x8dj1\xce\xfaN,?\xff\xecB2\xba\xe7~\xdc|\xe4\xff2\x8e\xa9<\xd8\xab\x17\xc0\xf7\xdfHI\xbb\xd58?\xc0\x05\x13\xaef\xea\xa0\x13\\\x94\xd29=\xaa\xfar\xf5a\xf7\x9a\x9e\x13d\xb6\xdf\xefY\"\xb8t\xbe\xf3~\x9e\x96\xacw\xf4\x1b\x07\xde\xcc\xd1\xc3;6;\xf6\x14z\xf7W\x8b\xf1\xff\xc2#v\x13%\xac\xdf*\x81\xb0\\n\xd5\xa6\x1b^\xb8\xf29|\xf4\x9e\xb9J\xe9{\x0c\xdd3-\x80t|\x1e?\xbf\x99\x91\xd9\x06[\x96\xa3\x97%\x185j\xfd\xf5\xad)\x01\xb2\x1b\x0e\xfb\xceA\x7f\xe0\x80N\n\x9d^\xeb\xef\xceO,\xbc\x05!\xa1\x04\x8c\x17\xb2-\xfe;V\xaa\xf5\x0fs\x82\x9dX\xe8\x00\x00\x15\x89IDAT\xc6>\xdf\xa3\xa1\xba\x93\x96M\xea\"l\\k\x12\xd2\xc9\x01\xf5D\xff\xcf\xea\x9c\xa5\x02\x10\xc8oZ_\xd2Z\xdb,\xf9`\xa5\xc3b\xc5\xef\xd3\x85\x83\x89\xaaP\xeb\xabgH\xfd>\xc9\xef\xb7|`\x9d\xf6\xaa\x05pIZ\xcd)\xe2\xe3\xe1V\\?\xed?\x0c\xebn\x1a\xf5\xb9h\x04<\xd5\\g1:\x00\x86S\x94\x96\xf6\x9e\xfc\xec\x1d\xc1\xa5\xf3\xad\xafw{\xd6\x08\xf2\xf8\x86\xc3\xf2+\xe0\x1eH\xb0\xdd\xb4#?\'\xbb\xf1\x9a4\xb8\x0c,\x15@\x8c\xd8\x93nn\xd6\xbck\xcf\x19\t(4WL\xba#\xb9\xdfn\x12lhk\xbc\xad\xbf\xa15\xd3\xe4\xb7\xebL\xfb\xcd\x8c\'\xe3\x11\x8c;\x1f\x8f\xe6\xe1\x06\x9b\xc9E\x9a c^B[Tp\xc1\\\xc1\xf3&\xc3\x85\xefnM\xed\xffx\x8a\xb5u\xb1\xa7\xb0\xff\xe4A\xcay\xdc\xf4\xb1I\x08\xbf\xc2#\x96\xd6\xbc\xa5\x02x\x93\xa7\xda\x00\xe5\x88\x85Q\xf5\x95K\xf7\xd8\x8e\xc0l\x84\x10\x8c\xec>1\xf9\xfd\xab/\xc1\x82\xcd\xc62]\x97\xcc\x13\xfc\xe0\x8dLI\xb73\xf9\x05\x82\xdf\x1f1\x07o\x89\x87\xb6\x04\x82\x1b\xa6?J\xbd\xdf|\xf1\x83\x84\x13T\xba\xd5\xf8\xafe\x82\x0b\xe7\n>\xdfe\xacC\xf0\xb5\xacU\x9f=\xa2|=D\x0b\xc5\xfe\x93\xd5\x16YX\xf6\xf1j\xb7#\xba\xd1\xa8M\x7f\xbe\xa5\x02\x88\x12q5\x12\x80\x84\rk\xb6\xe6N\x97\xc6\xc0C\xd4\xc7C\xbb*\xdf=\xf8\xe6\x8c\xef\x7f\xfb\xc4\xe8\xfd\x0e\xa6\xe9M-\x87\xc9\xdf\xbfv\x18\xbf;rNY9R]1\xf9Nf\x0c>\xd3\xf2\xbc7\xcb\x1a\x90\xc0\xcf\x17\x19\xc1J\xd3\x7f\xe9\x0f\'\xdd\xdd!\xef\x9eH\x9f\x01uJ\xe9\x1f\xba\xeb\x05\x9b\xb3v\x1d\x80\xd8\xf66Y*\x00\x9d\x98\xebH\xbf\xff\xbe]-\xf6Z\xfd\x80\xbd\xc3\x02\x00rN\xc7\xf5\xe4p\x81\xbdx\xbf\x1b\xb8\xc2b(\xae\xd4\x1c5\xfc\\\xae\x9a\xf2\x0f\xcb\xf3)k \xf5=\x9bj\xaf\x9a`\xec-\xac[i\x1a\r%\'1\xb0\x8d\x83\x96\xcb\x19\xff$\xebS\xd6Zg\xe5g&\x03\xdd\x15\x92\xcc\x1e{y\x87c\x89\xd9nv*\xf7\xa6\x19O3\xa1ar\xf1\nV\x00\xaa\xbd\xb5\\w\xf8C\x08\x9bW+}\x82T\xe6\xf1\xbd\xa3\"\x188\xb4\xbbr\x9eh\xd8]\x84\xea\x06\xea\x96\xda\x9d\xb7U\x00\x1a\xc2\"\xf4\x83=n\n[?\xb0|\xa7\x06\x17\x9a\xa9\x03O\xecp\xcc\xce\x9ao\xa8\xee\xcf\x1f\x8e|\x0e\xaf\xd65\x9e\x91\x10\x82\xeb\xa6?\xc8\xe4\x01\xd6>\tf\xbf\xf7\xf2C\x1d\xcc\x8d\xde\x03\x98~\xdc\x18\xa5\xf4M;Z\\E\xdc\x92\x10|\x8a\x7f\xda\n\xa3\xad\x02\x98\xcf#\x11\xe9bj\xb0\x94\x92\x9d\x8a\x0eA\xc3\xa6\xbb\x88\x8d\xd6Eq\x12\x95\'\xc1u\xd3\xfe\xc3O\x0e\xbb\xafx\x85)\"\xc7\x8f\xfc\x1a\xd7N\xb5\x08YlB\xb5o\xef0\xff\x07\rS\x1b\xb5\xf9\xdb\xaf\xad\x87[\xed\x10\x08=\x82\xfd\xd0\xa1\xed\x9bhd\x16\xaef\x1f\xfc\xe5\xc6\x07\x95\xd2\xd7\x0f\xe8\x1a\xb5[\xa1\x18\xd3\xd3~\xf9\xe8\x80\xa7\x9a?\xcc|\x8e\xee\x81\x86N*Qq\xf0h^\xae;\xfc!\x06\xa5\xf9@TP\xe3\xf3%va\xa3\xec,\x03\xdd<\xd6{\x1a9\xab\"\x89~\x99\x9b\x9b\xaf^V\x9cUW\xf7\x14.\xd9\xefz\xcbs7L\xbb\x9f\xdf\xccxb\x8fZl\xed\xe2\xfdo\xe4\xdai\xd6\xd6\xc0\xecqy\x84\x14\xeeBL\x9c4P9O4\xa2\xbe~ \x80\x0e9M\x07\x07\xb6\xa8\xe6\xdc\x86K\xc3\x8d?\xc0\xa0I{\xcfp`\x95\xb7c4\xd8\xde\xd5\x03\xb9e\xe6\xf3t\x0b\x98\x8f\xa9wu4\xe1\xe1g\x87?\xc8\xb4A\xa7v87\xa6\xe7\xc1%(Q\xe7s\xf81j\xeb\x13\xbe\xfb\xc6\xa7\xae\xe2mJ\x08\xbe\xc1\x139]\x07s*\x807x,,A-\xd8_\xbc\x04\xcf?\xe6`\x95\x874\x86N\xc9/xEW\xe3\xd6\x99/0e\xc0qt\x0f4p\xcb\x91\xcfs\xed\x94\xfbJ]\xa4N\xe1\xe8a\xe7\xf3\xd3\xa9\x0f2\xb8~,\x83\xeb\xc7p\xed\xd4\x07\xca\xca\xa7\xa1\x98T\xd7\xf8\x95\xd2?t\xe7s6gm5\x83\x1ev\xd0}\x97\xb3\xe1\x1d\xbf\x88Mu.\xb1\x8a\x0f\xf0\xec\x03\xafq\xec\x19&+IX\xb0\xb7\xcc\x0bH \x84\xe0\xdc\xf1?\xcc\x98O\xbe\xb7 \x84\xe0\xa2\xfd~\xbeW\xfdl\xd5\x00\xa0\x00\x8d[\x15gQ\xc5\xd1\x91\x8e\xc6\x8b\x1duGOf\xa4\xab\x1e\x9c\x96\xa66\xe5<{\xc3\xec\xc0\n{\'\'\xcc\x9e\x98;Q\x1a\xa1`\xd8U\x04 \tr\x0c}?q\x92\xd6\x91\x02x\x8f\xcf7ak\x05X\x14DJV.Us\n\x1a\xfdE\xb5\x95R*T\xe8*\xf4\x1f\xa2\xe6\x00\xf4\xfb\xab\xeesu\x1f\x01\xed\xff\xe4.Gi\x1d)\x80\x17x\x00\x89\xdd\x80\xa2\xb5!w\xd7o\xed\x97\xa2\xca\xc6_\xb7\xe7O\x04\xa9\xb0\xf7\xe1\xf3\xabG\xc0^\xbd\xdcn$\xcdn\r\x00qo\xc8a\xb7\x9d\xe3RI\xf8\x8e\xd3\xb4\xe9l\xdd\xb8C9OWX1\xa8B\x05\x15N\xb9\xd0\xde\xef#\x1b=\xa6\x13\x8b\xba3\xff5\xb8\xc2iz\xc7\n\xc0K\xec>\\tUI]\xb2a\xcd\x16\xa5<cO\xd8;<\xc2*\xec=\x0c\x19\xd9S)\xfd\xef\xae2\x0f\xbb\xe6\x80\xd0k<\xe1\xd8{\xd7\xb1\x02x\x95\xa7u\x89\xb0\xb9\xb0\xb5n\xb8\xfd:5W\x82@}\xa5\x19Pa\xcf\xa1\xa6V\xbdc{\x85\xed\"\xa0\xb6\xf5\xf0\xfb!\x9cw\xbe;V\x00!\xda\x11\xc8?8\xber\x1a\xdb6\xa97\x03\xf6\x96 !\x15\xf6|N\xfb\xaaZD\xe3P{\xc8\xed\x02 H\xe4q*\xe9\x95z&\x04\xdc\x80\x9bf\x80\x94|\xf4\xf6gJy\xc6\x9e\xa0\x161\xb5B\x85r\xa5\xcf@\xb5w\xf97W\xdc\xe3\xf6V\xc1\x05<\xad4\x0bOI\x01\xbc\xc6\x93Q\xb7\xcd\x80\xbbn2_c\xce\n\xcd.\x10^\x85\n]\x84\xe1c\xd5\'s\xad\xfd\xdc.\xf8\x87]\xef?\x8b\x82\x98\xac\xb5n\x83\x92\x020\xda\x16\xf2Z\xa5;\xc4iU\\:\x1c`\xf8\xf4\x8aO@\x85\xae\xcdI\xe7\xed\xaf\x94~\xd9\xe2\xd5H\xdd\x9d\x7f\xa4\x06\xca\x8b\x1f*\x0fNjh\xb7H\\\xac\x9b-\xe1_\x8a\xa1\xc2\x06\x1d\xb2w\xcd\r\xa8\xb0\xe7\xe1\xf1\xa8\x89\xd8\x9fn\xf8\xaf\xcdY\xdb\xda?\xf8\x06O+\x87\xe4VV\x00\xaf\xf3\xa8\x14\xb6AB\xac\x0b\xf9\xea\xffL\x96\xc6\xcdA\x99\xad\xe7X\xa1\x82c\xa6\x1f\xa76\xf3\x0f\xa0\xa5Y\xddR6\x10\x7fkG=$\xbf\xb2\x02\x08\x12\x04bG+\xdf\t\x88Eu\xe5\xc5\r\xf6?\xbb41\xef+T\xc8\x97C\xa6\x0fUJ\xff\xf7\xdf?\xe6\xf6VR\x87\x1f\xba\xc9\xa8\xee\x9f\x08\xe8\xc4\x16\xe0bn\x00\xc0//\xbfS)}m\x9f\x8aW`\x85\xae\x87\x9b\x99\x7f\x0b_\xfa\xd0\xe6\xacm\xbf@p!O\xb8\x92GW\n`\x1e\x8f\x82m\xbcq\xeb\xc2nT\\3\x00`\xe0A{O\xa0\x90\n{\x06g\x7f\xfdP\xa5\xf4\xcd;[\xf2\x18\xfb\xd7\x8f\x0b*8\xff\xa4\xe3J\x01\xc4\x19\xef&\x93\x940\xe7\xfeW\x94\xf2\x8c<\xa2\xe2\x1a\\\xa1kQS\xa7\x16\xf8\xe3\x17\xdfq\xbd\xd6C4\xc6\xb6W\xddfv\xad\x00\x16\xf2\xec6\xb73\x04\x9f\xf8\x97\xe5j\xc5\x96x\xab*~\x01\x15\xba\x06\xd3\x8f\x1b\xa5\x9c\xc7>\xf0\x87m\xef\xff\xe6WP\x97\xa7\x04\xae\x15@+M\x80\xfc\xb5\x9b\xbc\xb1\xa8\xce\xee&5\x87\x85\x03\xcfW\x9bLQ\xa1B\xa98x\xfa0\xa5\xf4w\xde\xf4\xb0\xeb{\xd5\xe1Ws4\xc8\"\x9f&\x00u\xe87\xb8\xf2\t@\xdd\xe4\xa9\xaaL\x10\xaa\xd0\x05\x184B}\xd4\xea\xady\x8bm\xce\xda\x8f\xfd\xcf\xe3\x89\x9d\xca7L#/\x05\xf0\x94\x11ux\xb7u\n\xeb\xc2o\xdfl\xbbf\xa1)\xa3fU<\x03+\x947g\\\xa46\xef\x7f\xc9\x07+]{\xfe\xd5Q\xf5\xb5\xdd\xb8\x8b\x19\x98 /\x05\x10g\x9c\xdb\x8c\x7f\xfe\xc5\x03J\xe9\xfb\xefW\xf1\x0c\xacP\xbex<B9\xba\xf1\xad\xd7\xfe\xcb\xe6\xac\xadb\x88ne\x9d\x9a\x00\x99\x90\xb7\x02x\x879\x9b\xed\x97\x0f\xb3\xfe\x11\xef\xbe\xfe\xa9\xf2\xfdz\x8dR\xeb]\xadP\xa1\xb3\x98\xfdM\xb5\xa1\xbfP0L$\xecn\xd1\x0f\t\x9f,d\xae\xab\xbc\xe9\xe4\xad\x00v\xd3\x0cp\xa1\x9b\xbcRJ\xe6=\xf3\xb6R\x9e\t\'uss\xab\n\x15\x8aNC\x7f\xb5\xe1\xea\x1b.s\xb7\x18\xaa\x04\xb9\x995S\\e\xce\xa2\x10M\x00v\xb2\xe5\x11\xc0F\x95Y[\x01\xff\xbdc\x8e\xf2\xfd\x02u\x05)v\x85\n\x05c\xe6\xa9c\x95\xf3l^\xbf\xdd\xe6\xac\xb5\xcc\x08\x08\xae\xe1c\xe5E{\xcd(\x88$\xbd\xcf\xcbHx\xd7M\xdeXLg\xeb\xc6F\xa5<\x07_X\x19\x12\xacP^\xa8\xae\xf9w\xc7/\\\xad\xb8\x07@-\xb1CZQ[}\xdb\x8a\x82U\xa5\x12f\xe0r}\x9b\xeb\xbe\xf9g\xa5\xf4\x1e\xbf\x86\xc2\n\xdb\x15*\x14\x95\xf1\x07\x0fP\xce\xf3\x9em\xff\x97\xed\xd0_h>/-Q\xbe\xa1\x05\x05\x13\xa3y\xdc\x1f\x96.\x87\x04C\xedaB\xc1\xb0\xd2\xfd\x0e\x98]\x99%X\xa1<8\xfat\xb5\x81\xb0\xc7\xee\x9b\xebj\xc1O\x00\x1d\xf9\x83f\xd4,f;\nZ\x8f\n\xa4\xeb!\xc1\x9f}\xe3OJ\xe9\xeb\xfaV\x02\x05T(=\x03\x87\xa9\xad\xf6\x030\xe7\x01;\xd7}\xfb\xa1\xbf\xddlW3\x97sPP\x05\xf0\n\x8fm\xb2_I\xd8\xfa\xc7m\xdb\xb8\x13\xa9\xa8\x16\xc7\x1d_\t\x1cZ\xa1\xb4\x9cq\x89Z\xc4\xdf\xb7\xe7/v\xed\xf8\x03\xcc}\xb7\x00C\x7f\xe9\x14T\x01D\t\xe3Ew\x15,\x04\xe0&\xc5h\xa8}\xc6V\xa6\tW(\x1du\xdd\x02\xcay\xee\xbc\xc9n\xa9<[\xc5 %\x9e\x13\x95o\x98\x83\x82w\xa5\xbd\xc5\xcboJ\xb0i\xd0[\xff\xc8e\x8bW+\xdfo\xd8\x94\x8a{p\x85\xd2p\xc1\xf7\x0fSJ\xbfr\xe9zW\xab\xfd\xc6\xd9\xf22\xffv\x9d\xd9\x8a\x82+\x80&\xb6!\x11?p\x9b\xffO?W\x1b\x1e\x19ZQ\x00\x15J\x80/\xe0\xc1\xebU\x13\x9f_\xff\xe0nW\xf7\x92 }\x04\\\xf7\xaf\xd9Q\x94\xc1\xb4\xddl\xb9\x03\x97\x8eA\xf6\xc3#\xe6\x0c\xd8\xaf\xd2\x14\xa8\xd0\xb9\\\xa8X\xfbo\xdb\xbc\x93X\xd4.j\x97\xad\xe3O\xdbk<\x9a\xdf\xac\x1f\x0b\x8a\xa2\x00\x16\xf1\x12\x12\xe1N\xdd\x01\xff\xbc\xed)\xa5\xf4\xa3\x8f\xaa\xb8\x07W\xe8<4MPS\xab6\'\xe5g_\xbf=\x9f[\x8eo\xb5\x1ba\xcf\x83\xa2\xb9\xd3lg\xdd7\xedc\x05Xk\xbc\xf9s\xdeQ\xbe_\xc3(\xf5\x0e\x99\n\x15\xdc0\xfb\xdb\x87(\xa5o\xde\xd5B\xa8=b\x93\xc2\xd6\xf1\xa7}\x01s\xd6)\xddP\x81\xa2)\x80\x8fx\r\xe0\rW\x99%<x\xe7sJY\xf6=Y}<\xb6B\x05U\x84\x80^}\xd4\xfa\x9d\xae\xb9\xe8\x8f\xae\xefWM\xec\xf0\xb6\x02\xb9\xfd\x9aQT\x87Z?\x1c\x89\xed\xd8\x86\xf5\xa9\x17\x1eU\xd7\x1d=\x86U\xa6\nW(.g}\xe3`\xa5\xf4\xad\xbb\xdbik\xb1\x9b\xb7c\xef\xf6\xfb&\xaf\xbd\xaftCE\x8a\xaa\x00\x9e\xe3~\x1d\xf8\xd8M^)\xe1\xf1\x7f\xbc\xa4\x94g\xff\xd3+\xee\xc1\x15\x8aK_\xc5\x95~\xaf\xb9\xe8V\xd7\xf7\xd2\x10\xc7\xed\xc4n\xa1\xd0\xfc)\xfa\x94\x9a\x18\xb1Cpi\x05<\xf3\xdf\xf9\xca\xf7\xeb6\xa0\xe2\"\\\xa18\x9c\xf6\xb5\x03\x94\xd2\xb7\xb7\x06\xd9\xddd\x17\xaf\xdf\xd6\xf1\'\xf4>\xf3\xe6+\xdd\xd0\x05EW\x00\xf3y(\"a\x95\x9b\xbcR\xc2\x13\xffT\x0by|\xe0\xec^nnU\xa1BNT\x03~^\xfd5\xf7\xb5?\x88\xd9\x8dE\xae\xfd\xa1\x13\x14@\x9c\x89\xb8\xb4\x02\x9e\xfe\xcf<\xe5\x9b\xd5U\x96\x13\xabP`N8\x7f_\xa5\xf4\xad\xbb\xdb\xd8\xbd\xcb.\xf4\xbdm\xdb?\xfc\x01\xf3\x9fT\xba\xa1K:E\x01\xbc\xcc\xfd\xed \\\reH\t\x8f\xde\xfb\xa2R\x9eC.hps\xab\n\x15,\x19>V\xed\x9d\xba\xfa\xab\xf9\xd4\xfe|\xb5\x91\x8d\xf9\xe4wL\'\x86\xd5\x90\xe3\xa5K+\xc0~\xfa\xa49\xd5=+\xeb\x08T(\x0cG\x9f\xa5\xe6\x85\xdb\xbc\xab\x85\xd6\xddv\xcb|\xdb\xd7\xfe\x1f\xf1\xaa\xfbpA\x8at\x9a\x02x\x89\xfb\xdb\x04\xb8sh\x90\xf0\xe0]j~\x01\x93\xbeR\xb1\x02*\x14\x86\xb1\x07\xf4SJ\xff\xe3\xbc\xda\xfe|m;\x1b\xf2\xc9\xafDg\x07\xd6rm\x05<\xff\xb0\x9a_\x80\x10\x82\xaan\x95\xb8a\x15\xf2\xe3\x88\x93G+\xa5\xdf\xd5\xd8L{\xab\xcd\x92\x999j\xff\xc5\xbc\xf6_\xa5\x1b\xe6I\xa7JH\xdc\nX\xeb6\xff\xfd\x7fyV)\xfd\xe4\xaf\xf5q{\xab\n\x15\x00\x988y\x90R\xfa\x1f\xe7\xe1\xf5\'\x10\x17mc\xbd\xeb\xfcn\xe8\xf4*RG\x8csk\x05\xbc\xf8\xf8\x02\xa5{\tM\xe0\xaf\xadX\x01\x15\xdc1\xf5\x98\x91J\xe9\x1b\xb7\xee\"\xd4n\x17\xdb\xd2v\xdc?\xfc\x11\xaf\xffG\xe9\x86\x05\xa0\xd3\xa5c\x1e\xff\r\nX\xe66\xff\xbfn\x7fZ)\xfd\x94\x8b+V@\x05w\x1c\xf4\x85!J\xe9\x7fr\xb1\xfb\xda_\"\xce\xdd\xe6\xde8vMI\xaaG\x01\xfb\xe1\xd2\n\x98\xf7\xb4\xdaJB\x9aG\xe0\xab\xaeX\x01\x15\xd48\xf4\xc8\xa1J\xe9\xb7lh$\x1c\xb2[\xe6\xcb\xde\xeb\xefc^{L\xe9\x86\x05\xa2$\x921\x97\xfb#n\x17\x12\x01\xb8\xfb\xb7vq\xd5:2\xf5\x92\x8a\x15PA\x8d\xc9G\rWJ\x7f\xed\xa5\xee\xe7\xfbK8e\xab\xcb\x01\xb2|)Y\xd5(\xf0\x1c\x86\xcbx\x01o\xce\xfdP\xe9^\x9aW\xe0\r\xa8\xad\xdaZa\xefe\xbf\xa9j\x1d\x7f\xebVn&\x16q\x17\xed\x07\x08}\xcc\x9b/(\xdd\xb0\x80\x94L\x01\xbc\xc4\xbfu\t\xf3\xdd\xe6\xff\xd3\rj\xa3%\x87]\xd4\xd7\xed\xad*\xece|\xe1\x84QJ\xe9o\xf8\x96\xbbE>\x01$\xb1\xa3\xb6\xb2\xc6u\xfe|)i\xe38\x86\xefh\xb7Q\x83\xde{Cmu$_\x95\x86Vq\x0e\xac\x90\x83Q\xfb\xf6VJ\xffy\xceH\xbf\xb6\xe3\xfe\xc1\xa5\xbc\xe1.hN\x81(\xa9\x02x\x85\x7fJ\x10\xae\'=\xfc\xee\xaa{\x95\xd2\x1f\xf6\xd5J_@\x05{\x8e\x99=A)\xfd\xaf\xbew\xa7\xeb{\xf9\x88L\xdb\xd8\x89^\x7ff\x94\xbc{\xfc}^>C\x82M\x03\xcaZ\x83.y\x7f\xa5\xd2jBU\xdd*\xb3\x04+X\xd3\x7f\xa8Zp\xd9\xa5\x1f\xae\xcc\xb1\xca\x8f}\xed\xff\x12O\x165\xda\x8f\x13J\xae\x00v\xb2\x19\x89\xf8\x87\xdb\xfc7^\xfe7\xa5\xf4\x07\x9cU\x89\x17P\xc1\x9c\xd3/Q\x0b\xf8\xf1\xbb+\xed,P\xfb\x8aI\"\x0f\x88b\x17(\xb4s(\xb9\x02\x00\xd8\xc8\xb2\x8bqi\x05\xacZ\xbaA\xc9\n\xe85\xb4\x12=\xb8BG\xba\xf5T[[b\xf1;\xcb\\\xaf\xf0+\xa1m\x01O\xbbv\x86+$e\xa1\x00>c\x11\x12\xfd\x0fn\xf3_\x7f\x99\xda\x82\xa9#\xa6U\x16\x15\xad\x90\xc9\xb9\x97\x1f\xaa\x94\xfe\xd6k\xffes6W\xed\xcf\x98 v\xc1B:\x8f\xb2P\x00\x00\xebYq\x15.W\x13Z\xf7\xf9f\xa5\x15W\x87O\xa9(\x80\n)\xbc>\rMs\xee\'\xf2\xe1\xc2\xcf\xf2\xa9\xfd\x9b\x16\xf0T\xe7D\xfbp@\xd9(\x80e\xbc\x8b@\xbb\xd6m\xfek/\xbdM)}\xf7\x81\x95\x10\xe2\x15\x0c\xce\xfe\x96Z\xa8\xef?^\xf7o\x9b\xb3\xb6\x1d\x7f\xf8\t\r/\x97\xda\x1f\xcaH\x01\x00\xacd\xf9M\x12\xbb\x9e\x11\xeb\x87\xbbi\xedv%+\xe0\x90s\xd4\xc6{+\xec\xb9t\xefU\xed8\xed\x07\x0b?\xcbe\xe1\xdb\xb1y>\xcf\xeer\x9d\xbb\x08\x94\x99\x02x\x9b\xf5,\xfb\xb6\xdb\xfc?U\\\x7f\xcd\xe3\xaf\xb8\x07\xef\xed\xec;y\x80R\xfa\xdb\xdc\xd7\xfer\x05\xef\x8f\x0cb\xb7HH\xe7SV\n\x00\xa0\x8d\xddw\xba\xb5\x026\xae\xd9\xa64\"0\xe9\xfc\x8a\x15\xb0\xb7\xf3\x85\x93\x9c\xbb\xfd.^\xb4<\x9f\xda\x7f\xc5Z\x96\xda\x05\n,\teY\x05\xce\xe2\xbc\xd9\x02\xf9\x80u\n\xebb\x0f\x19\xd5\x9f\x1b\xfe\xf2-\xc7\xf7\xda\xbd5\x82\xd4%zL\"u\x88Ft\"\xed:\x91\xa0$\x16\xd2\t\x07u\"\xed1\xa2!\x9dH\xd0\xf8\x1e\x0bK\xc2mQ\xf4\xe4\xc0\xa5L{/dZ\x07\x914\x16\x93KO#MsX\x1f\x8f\xe7\x91\xa42\'\xfe\x17\x1d\x8e\xa4\xfd/;\\\xa5C\xd9\xd2\xdf\xe5\x0ee\x88\x97\xdb\xbal\xa9\x82\xa9\x96\x01)L\x8e\xe7x\x0e9\xca\xe0\rx\xa8\xaa\xf1\x12\xa8\xf6\xe2\x0bx\xa8\xaa\xf6\x11\xa8\xd1\xf0\x07\xbc\xf8\xab\x8d\xe3\x81\x80\x87\xaaZ\x1f\x1e\xaf\x86\xc7+\xd04\x8d\x86\xfe\xce\xd7\xf9\xbb\xe8\xd8\x9f\xda(\x00[\xcd %\xf8_\xe6~\xbb\xf9\xc2%\xa1,]\xe3>\xe3\x9d\x07\xc7q\xe8?\x01\x8b\x9e:\x89\x95\x12X\xf7\xf9f\xa5{\xd5\xf7-\xcf\x95\x84\xf4\x98D\xd7%2\xfe\xa9\xc7H\xdb\x8f\x9f\x8b\xefGB:\xd1\x90N\xa8=F$\x18%\x12\xd4\t\xb5\xc5\x08\x07cDC1\x82\xed1\"A\xe3\\4\x92\xbb\n\xf3Uy\t\xd4x\xf0Wy\xf0\x064\xaa\xaa\xbdx\xab<\xf8\xab4\x02\xd5\x1e|U^c\xbf\xc6\x8b\xa6\t4\x8f\xb1\x89\xb4}M\x13\x19\xe74\x8f@\xfc\x7f{\xe7\x13\x1aG\x15\x06\xf0\xdf\xf7f\xe3\xee\xce\xee&\x9bPM.J\t*U\xf0O\x94\"BA\xe8\xc5\x9bxP\x11\x0fE\xf4\xe2UOB\x11\xbdx\x16\x04\xcf\x82\x97X\xf5\xa0E(\xf4\x90\x94\x82xh\xa9-JZk$\x89AmP\xf3\x7f\'\xbb&\xf3>\x0f3\xbb\xd9Zwl6\xdb\xdd\x99\xec\xfc\xd8e\xdf\xcccf\xbf7o\xbe\xef\xbdy\xdf7\xefI,\xdb\x9b\xdb\xe2\xfa\x0f\x0bm\xb7\xfe\n\x97\xe2\xa8\xfc\x10\xd3\x1e\x00\xc0q^~N\"\xdf\x13h-\xfa#G\x1f\xe0\xcd\xf7O\xdc\x01\xa9R\xfa\x95\xd7\x9f}\'\xc2\xf5\xf7\xbf\xad\xff\xc0\x14\x93Q\xef\x0b\xf7\x8c\xd8\x8d\x01\xd4\xf9\x99+\xa7\x81\x88\t\xd6Z_\xf4\xef/\xfc\xd4y\x81R\xfa\x96_\xe7\x97\xf6\xe1\xf7\x97o\xe3\xaa\xfc\x10c\x03\xb0\xc0U\x14\x9eo\xf7\xf8O><\xddIqR\xfa\x98w\xdf\xf8(\"7\xba\xf5\xcf\xb0s\xac\xc3\xe2t\x94\xd8\x1a\x00\x80Y\xae\x9c\xa1\xcd^\xc0\xb9\xaf/t^\xa0\x94\xbecc\xad\x82\xddC|I3\n\xdf\x9c\xe5\xb3\xf6\xfd\x06] \xd6\x06\xe0\x17fP\xf4\xc5v\x8f?\x7f\xe6b\'\xc5I\xe9C\xde~\xf5\x83\x88\xdc\xe8\xd6\xdfA\x9e\xe9\xb08\x1d\'\xb6\x83\x80u\x0es\x84q&j\xd2\xd2#\x00Q\xc5(\x0e\xba\xe1h\xb4\x83\xe3\x04\xae\x1f1\x82\xe38\xe1h\xb5\xc18\x86\xc1r\x01\xb7\x98\'_\xc8\xe2\x16r\x0c\x0e\x17q\x8b9\xf2n\x16\xb7\x98g\xb0\\\xc4-d\xc9\xb99\xf2\x85\xf4\x8d\xc28\xb2U\xa9\xe1U\xaa\xac\xafl\xe0mV\xa9n\xd5\xa8ll\xb1\xb6R\xa1\xeaU\xf1*U*\xeb[l\xacU\xa8z5\xacU|\xdfb}\x8b\xb56\xf4\xb0X|\xdf\xa2\xe1\xf6\xe6\xba\x17\xf1\x8f\x91\x81?\x17\xa7\x98<\xda\xf9Rv\x96X\xba\x01\x9b\x99\xe7\x1a\xe3L\x9c\x00\"\xe2\x02Z\x13]\x81]@v\x13\"\xe1f\xe8\x0e\x13!t\x8dI\xb8K\x1aa\x03\x81\xd12M\x06+H\x1b#\x881M\xc6\xcc\xe0d\x0c\xa5!\x97B\xc9\r\rX\x9eb\xd9\xa5Xr)\x14s\xe4\xdc,\xa5\xa1\x02\xc5R\x0e\xb7\xe4\x92\xcd\xb5\xb6\xa5\xc1\xb2\xd6\x1e^%P\x18o\xc3c}\xb5\x82W\xa9Q\xf5\xaal\x86\n\xe4mV\x03%\xf2-\xbe\xb5\xa1K2P$\xdfWT\xeb\x8a\xa5\x8d_\xd5\xc0\x8b/\xaa\xd8\xfa\xa8\x9a*\x8a\x84\x01\\Mq\nzs\x1cD\xfc\x88\x8e\xfa3\xf0T\x17\x85i\x9b\xd8\xf7\x00\x00\x0e\xf30\xe3<\xf6\xb7@\x84\xd3>\x11EI90D\x1a\x80\xb9)&\xf7\xb6\xacP\x8f\x88\xf5\x18@\x9dyf\xa81p\xb2\xd7r\xa4\xa4\xdc\x0e%\xec\xde&\x16\xec!\x89i6\x1f\xe4q\xee\xe5\xa1m\"\x1f[\x12S\x9c\x94D\x13\xf9L\xb2y\x8e\xcfK~\xd4\xd4\x161\"\x11=\x00\x80\xeb\\F\x91\xa8iXRRz\x8eE\x1fM\x8a\xf2C\x82\x0c\x00@\x86\xcakD\xae#\x90\x92r\xa7\x89|\xf6\xaf\xcdqm\xae\x8b\xc2\xec\x9bD\x19\x80\xb3|\x85\x12\xb5\x84\xaa&\xf0\x9b\xd2\xfb:\xe8L}\t\xbc5\xcf\xe5}]\x89n\x13{7\xe0\xad\xf8O\x80\xb3\xdck):Gj\x04\x0e\x08;\x0b\\\xdd\xdb\xec\xb41 Q=\x00\x80i\xbeXQ\xf8\xa3\xd7r\xa4\xa44c\xb1\xef\xcd&\xac\xf5\x87\x84\x0e\x9b\xdf\xcf\x04\xf7q\xc4JB\xe5O9X(\\\x9a\xe6\xd4\x93\x9a\xc0\xe1\xa9\xc4\xf5\x00\x00f\xf9\x8eE~4\xc0f\xafeI\xe9o\x14>\x9e\xe6\xd3D*?$\xbc\x055\x18\x8e\xf3\xc2=\x16g\x8e\xc0\x989\xd4\xa3m\x83\x8f(*iO!\xa5M\x14D\x839=\x1aQ\xca\n\xec\x80l\x81\xbd{\x9aSV\x13<\x8es\x80\x14\xa3uQ\x8e\xf1\ny\xb6\xf11(\x06\x83\x95\xa0\xca\x0c\xa0\x08H\xf3\x0c{\x96\xbb\xca\x03x\xc3>\xce\xa8b\xc6\x0cv\x18\xa4\xac\xc8\x98\xa0c\xc0\xb0\"e`\x0c\x18\x0b\x8e\x07i\xdc\x08\xc1\xb9\xea\xe7\x94\x9b\xe4\x0b\xe3\xe1\x83\x1d\xa2\xec\xbe\"\xa0\xe1\xbez^p\xc6\xc4\x1b\xb0\xffT\"\t\xd2\x1a\xa6\xd1p_\x90\xfd\xef\xd9\x0e%\xb8\x124\xe7JxQtU\x91\x15`E\xd0\x1b\x8a,\x01\xab\x82]\x06s\x03X\x02\xbb\xec`\xd7\x8a\xe8\xe2\x1a\x19\xbf\xa9^t7]\xaf/\xd4\xa0(\x19~g\x91\x19\xce\xb7.\xd6\x01 \xc97V_\xf04/\x91\'\x8ba\x1b\xdb0%\xf5\x9b\xb5Y1\x1a\xe9!\x87\x9d\x11KfDa40XRV\xe4\x90\xa0\xa3\xc0hh\xbc\x0e\x11\xe4\xd7\x14\xf9\x13X\x05\xbdA\xa0@\xcb\xa0\x7f\t\xba\x14l\xeb\x8a\xe0/\xfbd\x7f3\xf8\xdb\xf5\xff\xe3\x16\x95Tl``1\xf8\x14\x18\xe1K\xf6\xb6xkJw\xf9\x07\x03\xed\"\x81f\x88\x83\xbf\x00\x00\x00\x00IEND\xaeB`\x82",
            ];
            pub const fn const_bytes(self) -> &'static [u8] {
                &Self::BYTES[self.index()]
            }
            pub const fn const_str(self) -> &'static str {
                unsafe { std::str::from_utf8_unchecked(self.const_bytes()) }
            }
            pub const fn try_const_str(self) -> Result<&'static str, std::str::Utf8Error> {
                unsafe { std::str::from_utf8(self.const_bytes()) }
            }
            const fn index(self) -> usize {
                (0x00000000ffffffff & unsafe { std::mem::transmute::<_, u64>(self) }) as usize
            }
            pub const fn const_path(self) -> &'static str {
                &Self::PATHS[self.index()]
            }
            pub const fn const_name(self) -> &'static str {
                &Self::NAMES[self.index()]
            }
            pub fn all_variants() -> impl Iterator<Item = Self> {
                crate::_internal::visit_files(Self::PARENT.as_ref(), Self::from_path_internal)
            }
            fn from_path_internal(path: &Path) -> Self {
                Self::from_path(path)
            }
            fn path_ref(path: &Path) -> Cow<'static, Path> {
                Self::from_path(path).path()
            }
            pub fn all_paths() -> impl Iterator<Item = Cow<'static, Path>> {
                crate::_internal::visit_files(Self::PARENT.as_ref(), Self::path_ref)
            }
        }
        impl FileAsset for Images {
            const PARENT: &'static str = "example_assets/images";
            fn from_const_path<P: AsRef<Path>>(path: P) -> Option<Self> {
                let path = path.as_ref();
                Self::PATHS
                    .iter()
                    .position(|&p| path == <str as AsRef<Path>>::as_ref(p))
                    .map(|index| Self::ALL[index])
            }
            fn from_const_name(name: &str) -> Option<Self> {
                Self::NAMES
                    .iter()
                    .position(|&n| n == name)
                    .map(|index| Self::ALL[index])
            }
            fn from_path_unchecked<P: AsRef<Path>>(path: P) -> Self {
                let path = path.as_ref();
                Self::from_const_path(path)
                    .unwrap_or_else(|| Self::_Unknown(crate::_internal::fetch_path_index(path)))
            }
            fn try_path(self) -> crate::Result<Cow<'static, Path>> {
                Ok(match self {
                    Self::_Unknown(index) => Cow::Owned(crate::_internal::fetch_path(index)?),
                    c => Cow::Borrowed(c.const_path().as_ref()),
                })
            }
        }
        impl crate::serde::Serialize for Images {
            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
            where
                S: crate::serde::Serializer,
            {
                match *self {
                    Self::_Unknown(_) => {
                        let path = self.path();
                        let key = crate::PathedKey::Path {
                            path: path.as_ref(),
                        };
                        key.serialize(serializer)
                    }
                    c => {
                        let key = crate::PathedKey::Known(self.const_name());
                        key.serialize(serializer)
                    }
                }
            }
        }
        impl<'de> crate::serde::Deserialize<'de> for Images {
            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
            where
                D: crate::serde::Deserializer<'de>,
            {
                let key: crate::PathedKey = crate::PathedKey::deserialize::<D>(deserializer)?;
                Ok(match key {
                    crate::PathedKey::Known(name) => Self::from_const_name(name).expect("TODO"),
                    crate::PathedKey::Path { path } => Self::try_from_path(path).expect("TODO"),
                })
            }
        }
        impl BytesAsset for Images {
            fn try_bytes(&self) -> crate::Result<Cow<'static, [u8]>> {
                Ok(match *self {
                    Self::_Unknown(_index) => Cow::Owned(crate::_internal::fetch_bytes(_index)?),
                    c => Cow::Borrowed(c.const_bytes()),
                })
            }
            fn try_bytes_modified(
                &self,
                previous_modified: Option<SystemTime>,
            ) -> crate::Result<Option<(Vec<u8>, SystemTime)>> {
                crate::_internal::fetch_bytes_modified(self.try_path()?.as_ref(), previous_modified)
            }
            fn try_load_bytes(&self) -> crate::Result<Vec<u8>> {
                Ok(std::fs::read(self.try_path()?)?)
            }
        }
        impl StrAsset for Images {
            fn try_string(&self) -> crate::Result<Cow<'static, str>> {
                Ok(match *self {
                    Self::_Unknown(_index) => Cow::Owned(crate::_internal::fetch_string(_index)?),
                    c => Cow::Borrowed(c.try_const_str()?),
                })
            }
        }
        impl crate::Asset for Images {
            type Value = crate::image::RgbaImage;
            fn load(bytes: Cow<[u8]>) -> crate::Result<Self::Value> {
                crate::_internal::load::load_image(bytes)
            }
        }
        impl crate::CachedAsset for Images {
            type CacheType = crate::cache::RwCache<Self, Self::Value>;
            fn cache() -> &'static Self::CacheType {
                &CACHE
            }
        }
    }
    pub mod text {
        //! This is a sub module.
        #![allow(clippy::derive_partial_eq_without_eq)]
        use super::*;
        use crate::{BytesAsset, FileAsset, StrAsset};
        use std::{borrow::Cow, path::Path, time::SystemTime};
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        /// TODO
        pub struct CACHE {
            __private_field: (),
        }
        #[doc(hidden)]
        pub static CACHE: CACHE = CACHE {
            __private_field: (),
        };
        impl ::lazy_static::__Deref for CACHE {
            type Target = crate::cache::RwCache<Text, <Text as crate::Asset>::Value>;
            fn deref(&self) -> &crate::cache::RwCache<Text, <Text as crate::Asset>::Value> {
                #[inline(always)]
                fn __static_ref_initialize(
                ) -> crate::cache::RwCache<Text, <Text as crate::Asset>::Value> {
                    crate::cache::RwCache::new()
                }
                #[inline(always)]
                fn __stability(
                ) -> &'static crate::cache::RwCache<Text, <Text as crate::Asset>::Value>
                {
                    static LAZY: ::lazy_static::lazy::Lazy<
                        crate::cache::RwCache<Text, <Text as crate::Asset>::Value>,
                    > = ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CACHE {
            fn initialize(lazy: &Self) {
                let _ = &**lazy;
            }
        }
        #[repr(u32)]
        pub enum Text {
            Note,
            _Unknown(u32),
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Text {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match self {
                    Text::Note => ::core::fmt::Formatter::write_str(f, "Note"),
                    Text::_Unknown(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "_Unknown", &__self_0)
                    }
                }
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Text {
            #[inline]
            fn clone(&self) -> Text {
                let _: ::core::clone::AssertParamIsClone<u32>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::Copy for Text {}
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Text {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Text {
            #[inline]
            fn eq(&self, other: &Text) -> bool {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                __self_tag == __arg1_tag
                    && match (self, other) {
                        (Text::_Unknown(__self_0), Text::_Unknown(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        _ => true,
                    }
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for Text {}
        #[automatically_derived]
        impl ::core::cmp::Eq for Text {
            #[inline]
            #[doc(hidden)]

            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<u32>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for Text {
            #[inline]
            fn partial_cmp(&self, other: &Text) -> ::core::option::Option<::core::cmp::Ordering> {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                match (self, other) {
                    (Text::_Unknown(__self_0), Text::_Unknown(__arg1_0)) => {
                        ::core::cmp::PartialOrd::partial_cmp(__self_0, __arg1_0)
                    }
                    _ => ::core::cmp::PartialOrd::partial_cmp(&__self_tag, &__arg1_tag),
                }
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for Text {
            #[inline]
            fn cmp(&self, other: &Text) -> ::core::cmp::Ordering {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                match ::core::cmp::Ord::cmp(&__self_tag, &__arg1_tag) {
                    ::core::cmp::Ordering::Equal => match (self, other) {
                        (Text::_Unknown(__self_0), Text::_Unknown(__arg1_0)) => {
                            ::core::cmp::Ord::cmp(__self_0, __arg1_0)
                        }
                        _ => ::core::cmp::Ordering::Equal,
                    },
                    cmp => cmp,
                }
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for Text {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                ::core::hash::Hash::hash(&__self_tag, state);
                match self {
                    Text::_Unknown(__self_0) => ::core::hash::Hash::hash(__self_0, state),
                    _ => {}
                }
            }
        }
        impl Text {
            pub const ALL: &'static [Self] = &[Self::Note];
            const PATHS: &'static [&'static str] = &["example_assets/text/note.txt"];
            const NAMES: &'static [&'static str] = &["Note"];
            const BYTES: &'static [&'static [u8]] = &[b""];
            pub const fn const_bytes(self) -> &'static [u8] {
                &Self::BYTES[self.index()]
            }
            pub const fn const_str(self) -> &'static str {
                unsafe { std::str::from_utf8_unchecked(self.const_bytes()) }
            }
            pub const fn try_const_str(self) -> Result<&'static str, std::str::Utf8Error> {
                unsafe { std::str::from_utf8(self.const_bytes()) }
            }
            const fn index(self) -> usize {
                (0x00000000ffffffff & unsafe { std::mem::transmute::<_, u64>(self) }) as usize
            }
            pub const fn const_path(self) -> &'static str {
                &Self::PATHS[self.index()]
            }
            pub const fn const_name(self) -> &'static str {
                &Self::NAMES[self.index()]
            }
            pub fn all_variants() -> impl Iterator<Item = Self> {
                crate::_internal::visit_files(Self::PARENT.as_ref(), Self::from_path_internal)
            }
            fn from_path_internal(path: &Path) -> Self {
                Self::from_path(path)
            }
            fn path_ref(path: &Path) -> Cow<'static, Path> {
                Self::from_path(path).path()
            }
            pub fn all_paths() -> impl Iterator<Item = Cow<'static, Path>> {
                crate::_internal::visit_files(Self::PARENT.as_ref(), Self::path_ref)
            }
        }
        impl FileAsset for Text {
            const PARENT: &'static str = "example_assets/text";
            fn from_const_path<P: AsRef<Path>>(path: P) -> Option<Self> {
                let path = path.as_ref();
                Self::PATHS
                    .iter()
                    .position(|&p| path == <str as AsRef<Path>>::as_ref(p))
                    .map(|index| Self::ALL[index])
            }
            fn from_const_name(name: &str) -> Option<Self> {
                Self::NAMES
                    .iter()
                    .position(|&n| n == name)
                    .map(|index| Self::ALL[index])
            }
            fn from_path_unchecked<P: AsRef<Path>>(path: P) -> Self {
                let path = path.as_ref();
                Self::from_const_path(path)
                    .unwrap_or_else(|| Self::_Unknown(crate::_internal::fetch_path_index(path)))
            }
            fn try_path(self) -> crate::Result<Cow<'static, Path>> {
                Ok(match self {
                    Self::_Unknown(index) => Cow::Owned(crate::_internal::fetch_path(index)?),
                    c => Cow::Borrowed(c.const_path().as_ref()),
                })
            }
        }
        impl crate::serde::Serialize for Text {
            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
            where
                S: crate::serde::Serializer,
            {
                match *self {
                    Self::_Unknown(_) => {
                        let path = self.path();
                        let key = crate::PathedKey::Path {
                            path: path.as_ref(),
                        };
                        key.serialize(serializer)
                    }
                    c => {
                        let key = crate::PathedKey::Known(self.const_name());
                        key.serialize(serializer)
                    }
                }
            }
        }
        impl<'de> crate::serde::Deserialize<'de> for Text {
            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
            where
                D: crate::serde::Deserializer<'de>,
            {
                let key: crate::PathedKey = crate::PathedKey::deserialize::<D>(deserializer)?;
                Ok(match key {
                    crate::PathedKey::Known(name) => Self::from_const_name(name).expect("TODO"),
                    crate::PathedKey::Path { path } => Self::try_from_path(path).expect("TODO"),
                })
            }
        }
        impl BytesAsset for Text {
            fn try_bytes(&self) -> crate::Result<Cow<'static, [u8]>> {
                Ok(match *self {
                    Self::_Unknown(_index) => Cow::Owned(crate::_internal::fetch_bytes(_index)?),
                    c => Cow::Borrowed(c.const_bytes()),
                })
            }
            fn try_bytes_modified(
                &self,
                previous_modified: Option<SystemTime>,
            ) -> crate::Result<Option<(Vec<u8>, SystemTime)>> {
                crate::_internal::fetch_bytes_modified(self.try_path()?.as_ref(), previous_modified)
            }
            fn try_load_bytes(&self) -> crate::Result<Vec<u8>> {
                Ok(std::fs::read(self.try_path()?)?)
            }
        }
        impl StrAsset for Text {
            fn try_string(&self) -> crate::Result<Cow<'static, str>> {
                Ok(match *self {
                    Self::_Unknown(_index) => Cow::Owned(crate::_internal::fetch_string(_index)?),
                    c => Cow::Borrowed(c.try_const_str()?),
                })
            }
        }
        impl crate::Asset for Text {
            type Value = Cow<'static, [u8]>;
            fn load(bytes: Cow<'static, [u8]>) -> crate::Result<Self::Value> {
                Ok(bytes)
            }
        }
        impl crate::CachedAsset for Text {
            type CacheType = crate::cache::RwCache<Self, Self::Value>;
            fn cache() -> &'static Self::CacheType {
                &CACHE
            }
        }
    }
}
